syntax = "proto3";
package centerMsg;

import "errorNo.proto";
import "cliAllEnum.proto";

message ItemReq{
	uint32 item_id = 1;
	uint32 item_num = 2;
}

message DrawItemReq{
	uint32 item_id = 1;
	uint32 item_num = 2;
	uint32 HeroItemID = 3; //用来判定是不是转化为碎片了 主要是前端显示用
}

//开天商城道具信息
message KTShopItemInfo{
	uint32 ItemCfgID = 1;
	bool AlreadyBuy = 2;
}

message HeroInfo {
	uint32 ItemCfgID = 1;
	uint32 Stars = 2;
	string GodWeaponUID = 3;//神器
	cliAllEnum.HeroQuality HeroQuality = 4;//英雄品质 可变化
	map<uint32,uint32> SkillLv = 5;//技能等级 key:enum SkillType
	uint32 Time = 6;//获得的时间(秒)
	repeated uint32 FetterList = 7;//点亮的羁绊
	bool UseWanNengChip = 12;//使用万能碎片
	uint32 AwakeLevel = 13;//幻灵觉醒等级 add by tn 20211210
	HeroPotentailInfo HeroPotentailInfo=14;//潜能
	
	uint32 KTTabIndex = 16; //使用开天牌页的哪一个栏目
	uint32 BloodPower =17;//血脉之力
	uint32 SkinCfgID = 18;//皮肤配置ID
	repeated uint32 StarsExtraAttrId=19;//升星获得的额外属性ID hero_star_starplus_attr表中ID
	repeated uint32 AwakeExtraAttrId=20;//觉醒获得的额外属性ID hero_star_starplus_attr表中ID
}

message HeroPotentailInfo
{
	map<string,uint32> PotentialInfo=1;// key：attr value:等级
	uint32 Level =2;//总的潜能等级
	uint32  SumAttrLevel= 3;//历史最高各个潜能属性等级总和
}


message HeroKangMieInfo
{
	map<uint32,uint32> KangMieAttrLv = 1;// key (hero_restrain_ke_attr or hero_restrain_yu_attr) cfgid,value : lv
}

message ItemInfo{
	string UID = 1;
	uint32 ItemCfgID = 2;
	uint32 Num = 3;
}

message GemInfo{
	string UID = 1;
	uint32 ItemCfgID = 2;
	uint32 Num = 3;
	bool IsEquip = 4;
}
//手牌信息
message HandCardInfo{
	string UID = 1;
	uint32 ItemCfgID = 2;
	uint32 Num = 3;
}

message EquipmentInfo{
	uint32 ItemCfgID = 1;
	bool Lock = 2;
	uint32 Num = 3;
	bool Equip = 5;
	string UID = 6;
	uint32 Timestamp = 7;//获得的时间(秒)
}

message GodWeaponInfo{
	uint32 ItemCfgID = 1;
	uint32 Level = 2;
	uint32 Num = 3;
	bool Equip = 5;
	string UID = 6;
	uint32 Timestamp = 7;//获得的时间(秒)
}

message StampAttr{
	string Attr = 1;//属性
	double AttrRandomNum = 2;//初始属性随机值
}

message StampInfo{
	string UID = 1;
	uint32 ItemCfgID = 2;
	uint32 Num = 3;
	uint32 Stars = 5;
	cliAllEnum.ItemQuality ItemQuality = 6;//道具品质
	repeated StampAttr StampAttr = 7;//拥有的属性 
	uint32 Exp = 8;
	bool Lock = 9;
	repeated uint32 KaiTianStrongerSkill = 10;
}

message HeroQuestInfo {
	uint32 HeroCfgID = 1; // 任务幻灵ID
	uint32 StartTime = 2; // 任务幻灵开始时间 0: 未开启/已结束
	uint32 EndTime = 3; // 任务幻灵结束时间 0: 未开启/已结束
	bool GetAward = 4; // 奖励领取状态
}

message DrawCardInfo{
	uint32 DrawNum = 1;
	uint32 NonSSRNum = 2;
	bool FirstTen = 3; //第一个10连
	bool Guide = 4;//新手引导
	ItemReq BrightItem = 6;//明保给的道具
	map<uint32,XinYuanCardInfo> XinYuanCard = 8;//心愿抽 key index
	uint64 DrawCardCount = 9;//累计抽卡次数
	HeroQuestInfo HeroQuestInfo = 10; // 幻灵任务信息
}

message XinYuanCardInfo
{
	uint32 HeroCfgID = 1;
	bool AlreadyUse = 2;
}

message PVELevelInfo{
	map<uint32,bool> LevelBox = 1; //关卡宝箱领取情况
	repeated uint32 ChapterBox = 2; //已经领取章节宝箱的章节ID
	uint32 CurLevelClear = 3;//当前通关PVE配置表ID
}


message DescentLevelInfo{
	uint32 CurLevelClear = 1;//当前通关PVE配置表ID
	repeated uint32 LevelPlot = 2;//剧情通过情况
	map<uint32,bool> LevelBox = 3; //关卡宝箱领取情况
}




//爬塔信息 用于显示，和ClimbTowerInfo 字段要全覆盖 
message ClimbTowerInfoView{
	uint32 CurLevelClear = 1;//当前通关ID
	map<uint32,bool> LevelBox = 2; //宝箱领取情况
	int32 DailyLevelID = 4;//用于判定是否可以领取爬塔每日奖励 记录的是昨天最高爬到第几层(关卡ID) 0代表不能领取
}


//图鉴信息
message HandbookInfo{
	map<uint32,AtlasHeroInfo> AtlasInfo = 1; //key HeroCfgID 
	uint32 Handbook_EXP = 2;
	uint32 Handbook_Lv = 3;
}

//图鉴信息
message AtlasHeroInfo{
	uint32 HeroCfgID = 1;
	uint32 Stars = 2;
}


//图鉴信息
message AtlasGodWeaponInfo{
	uint32 GodWeaponCfgID = 1;
	uint32 Stars = 2;
}

//阵位信息
message ZhenWeiInfo{
	uint32 Level = 1;
	uint32 Exp = 2;
	uint32 ZhenWeiGrade = 3;//阵位的阶数 == 英雄阶数
}

//布阵信息
message EmbattleInfo {
	map<uint32,uint32> HeroList = 1;//key 阵位的位置,value 英雄道具ID
	map<uint32,PlayerSkillInfo> PlayerSkills = 2;// key 主角技能ID 
	map<uint32,EmbattleFetterList> EmbattleFetter =3;//激活的上阵羁绊 key 英雄道具ID
	map<uint32,HandCardInfo> HandCardList = 4;//手牌 位孔：手牌
	map <uint32,uint32> PostionMap=5 ;//key 位置/前后排 出手顺序  value 外面的阵位 对应HeroList中的key
}
message EmbattleFetterList
{
	repeated uint32 FetterID =1;//上阵羁绊ID
}

//开天牌
message KaiTianPaiInfo{
	string UID = 1; //UID 就是 ItemCfgID
	uint32 ItemCfgID = 2;
	uint32 Num = 3;
}

message KaiTianPaiShop{
	bool Lock = 1;
	repeated KTShopItemInfo KaiTianPaiList = 2;
	//map<uint32,uint32> KTPStatistics = 3;//开天牌获取与销毁的参数 主要用于开天牌商店 key为KaiTianPai CfgID
}

//战斗录像存储
message BattleVideo{
	string VideoID = 1;//用于查询回放记录
	string RoomID = 2;//房间ID
	uint32 RandomSeed = 3;//随机种子
	repeated BattlePlayerInfo BattlePlayerList = 4;//双方对手
	string CliVer = 5;//客户端版本号
	cliAllEnum.PVEType PVEType = 6;
	uint32 LevelID = 7;//关卡ID
	G2C_BattleOver BattleOver = 8;
	TowerBattleVideo TowerBattleVideo = 9; //因为爬塔是多队 所以录像比较特殊
	uint32 CreateTS = 10;
}

message TowerBattleVideo{
	repeated G2C_EnterPVEBattle EnterList = 1;
	repeated G2C_BattleOver OverList = 2;
}

//竞技场排名信息
message ArenaOverInfo
{
	uint32 CurArenaRank = 1; //当前自己竞技场名次
	uint32 LastArenaRank = 2; //自己上次竞技场名次
	uint32 ChallengerCurArenaRank = 3; //当前挑战者竞技场名次
	uint32 ChallengerLastArenaRank = 4; //挑战者上次竞技场名次
	uint32 HistoryMaxRank = 5;
	repeated ItemReq ItemList = 6;//突破奖励
	string ChallengerHeadIcon = 7;//挑战对象的头像
	string ChallengerName = 8;//挑战对象的名字
	uint32 LastHistoryMaxRank = 9;
	uint64 SelfFightPower = 10;//自己的战力
	uint64 ChallengerFightPower = 11;//挑战者的战力
	uint32 SelfPlayerLv = 12;//自己的等级
	uint32 ChallengerPlayerLv = 13;//挑战者的等级
	uint32 ChallengerHeadIconFrame = 14;//挑战对象的头像框
}

//个人战报(后续战斗都用此类型 不局限于竞技场)
message ArenaBattleReport{
	string VideoID = 1;//用于查询回放记录
	bool Win = 2;
	string OppoentName = 3;//敌方名字
	string OppoentHeadIcon = 4;//敌方头像
	string OppoentPlayerID = 5;//挑战者PlayerID
	uint32 MyRankBefore = 6;//本场战斗前自己的排名（非交换后）
	uint32 MyRankAfter = 7;//本场战斗后自己的排名（交换后
	uint32 ReportTs = 8;//记录的时间
	bool IsinitiativeChal = 9;//是否是主动挑战
	string OppoentGuild = 10;//敌方公会
	uint32 OppoentMainPlayerCfgID = 11;//敌方主角配置
	uint32 OppoentPlayerLv = 12;//敌方角色等级
	uint64 OppoentFightPower = 13;//敌方战力
	uint64 OppoentHeadIconFrame = 14;//敌方头像框
	uint32 OppoentTitleID = 15;//敌方称号
	cliAllEnum.FactionType FactionType = 16; // 阵营类型
	uint32 MyScoreBefore = 17;//本场战斗前自己的积分
	uint32 MyScoreAfter = 18;//本场战斗后自己的积分
}

//全服前十名战报
/*message ArenaBattleTopReport{
  string VideoID = 1;//用于查询回放记录
  string Cha1Name = 2;//挑战者名字
  string ChalHeadIcon = 3;//挑战者头像
  uint32 ChalFP = 4;//挑战者战力
  string ChalPlayerID = 5;//挑战者PlayerID
  string EnemyName = 6;//对手名字
  string EnemyHeadIcon = 7;//对手头像
  uint32 EnemyFP = 8;//对手战力
  string EnemyPlayerID = 9;//对手uid
  bool ChalIsWin = 10;//挑战者是否胜利
  uint32 UpRank = 11;//上升到多少名
  uint32 ReportTs = 12;//记录的时间
}*/

//擂台结算
message RingOverInfo
{
	uint32 CurArenaRank = 1; //当前自己擂台名次
	uint32 LastArenaRank = 2; //自己上次擂台名次
	uint32 ChallengerCurArenaRank = 3; //当前挑战者擂台名次
	uint32 ChallengerLastArenaRank = 4; //挑战者上次擂台名次
	string ChallengerHeadIcon = 5;//挑战对象的头像
	string ChallengerName = 6;//挑战对象的名字
	uint64 SelfFightPower = 7;//自己的战力
	uint64 ChallengerFightPower = 8;//挑战者的战力
	uint32 SelfPlayerLv = 9;//自己的等级
	uint32 ChallengerPlayerLv = 10;//挑战者的等级
}


message ArenaHeroInfoView
{
	uint32 HeroCfgID = 1;
	uint32 Grade = 4;//英雄初始阶数 消除
	uint32 HeroLv = 7;//英雄等级
	cliAllEnum.HeroQuality HeroQuality = 8;//英雄品质
	uint32 SurfaceID = 9;
	uint32 FaXiangGrade = 10;//法相的阶数 == 英雄突破
	uint32 HeroStar = 11;//英雄星级
	uint64 FightPower = 12;
	uint32 DisplayHeroStars = 13;//英雄星数和觉醒等级
	map<string,double> HeroAttr=14;//英雄扩展属性
}

message ArenaPlayerInfoView
{
	map<uint32,ArenaHeroInfoView> ArenaHeroInfoView = 4; //key:布阵的站位
	
}

//竞技场排名信息 用于显示
message ArenaRankInfoView{
	uint32 Rank = 1;
	string PlayerID = 2;
	string PlayerName = 3;
	string PlayerHeadIcon = 4;
	uint32 PlayerLevel = 5;
	bool IsRobot = 6;
	ArenaPlayerInfoView ArenaPlayerInfoView = 7;
	uint32 HeadIconFrame = 8;//头像框
	uint64 FightingNum = 9;
	uint32 PlayerVipLv = 10;
	string GuildName = 11;
	repeated uint32 KTSkillList = 12;//装备开天牌技能
	uint32 MainPlayerCfgID = 13;
	repeated uint32 ElfinGifts = 15;//小精灵的效果
	repeated BattlePlayerSkillInfo MainPlayerSkillsList = 17;//主角技能
	uint32 MainPlayerSkinCfgID = 18;//主角皮肤配置ID
	uint32 WorldMatchScore = 19;//世界匹配的分数
	uint32 PlayerTitleID = 20;
	cliAllEnum.FactionType FactionType = 21; // 阵营类型
}

//竞技场排名信息
message MatchOverInfo
{
	uint32 CurArenaRank = 1; //当前自己匹配赛名次
	uint32 LastArenaRank = 2; //自己上次匹配赛名次
	uint32 ChallengerCurArenaRank = 3; //当前挑战者匹配赛名次
	uint32 ChallengerLastArenaRank = 4; //挑战者上次匹配赛名次
	uint32 CurScore = 5;
	string PlayerID = 6;
	uint32 LastScore = 7;
	uint32 OpponentScore = 8;
	string OpponentPlayerID = 9;
	uint32 OpponentLastScore = 10;
	uint64 SelfFightPower = 11;//自己的战力
	uint64 ChallengerFightPower = 12;//挑战者的战力
}


//种族信息
message DescentInfo{
	repeated uint32 HeroCfgIDList = 1;
}


//好友信息
message GoodFriendInfo{
	string PlayerID = 1;
	string PlayerName = 2;
	string PlayerHeadIcon = 3;
	uint32 PlayerVipLv = 4;
	uint32 PlayerLevel = 5;
	uint32 IntimacyValue = 6;//羁绊(好友度)
	uint32 Time = 7;//加入的时间
	bool IsOnline = 8;//是否在线
	string ChatRoomID = 9;//聊天室ID 用于查看聊天记录
	uint32 MainPlayerCfgID = 10;//主角ID
	uint32 LastChatTS = 11;//最后一次聊天的时间
	bool RedPoint = 12;//小红点
	uint32 JiBanLv = 13;//羁绊等级
	uint32 JiBanLvExp = 14;//羁绊经验值
	string GuildID = 15;
	string GuildName = 16;
	cliAllEnum.FactionType FactionType = 17; // 阵营类型
	uint32 MainPlayerSkinCfgID = 18;//主角皮肤配置ID
	uint64 FightPower = 19;
	uint32 OfflineTime = 20;
	uint32 HelpDaiXiaoCount = 21;
	uint32 HeadIconFrame = 22;//头像框
}

message ApplyFriendInfo{
	string PlayerID = 1;
	string PlayerName = 2;
	string PlayerHeadIcon = 3;
	uint32 PlayerVipLv = 4;
	uint32 PlayerLevel = 5;
	uint32 HeadIconFrame = 6;//头像框

	bool IsOnline = 12;//是否在线
	uint32 MainPlayerCfgID = 15;//主角ID
	uint32 MainPlayerSkinCfgID = 16;//主角皮肤配置ID
	uint64 FightPower = 17;
}

message FriendInfoView{
	map<string,GoodFriendInfo> GoodFriendList = 1;
	repeated ApplyFriendInfo ApplyFriendList = 2;//好友申请信息
	repeated GoodFriendInfo RecentChatInfoList = 3;
	map<string,GoodFriendInfo> BlackFriendList = 4;
	map<string,uint32> FriendPoint_Send = 5;//玩家友情点赠送情况 1 代表送过
	map<string,uint32> FriendPoint_Rev = 6;//玩家友情点接收情况 1 代表接收了 2 代表领取
}


message MainQuestInfo
{
	uint32 QuestCfgID = 1; //每日任务就位每人任务配置表 主线就是主线任务配置表
	uint32 ProgressBar = 2;//进度
	cliAllEnum.QuestState QuestState = 3;//当前状态
}

message HomeHotelQuestInfo
{
	uint32 HomeQuestGroupID = 1; // 当前任务组ID
	map<uint32,MainQuestInfo> HomeQuestList = 2; //key HomeQuest CfgID
}


message QuestInfoView
{
	map<uint32,MainQuestInfo> AchievementList = 1; //key AchievementCfgID
	map<uint32,MainQuestInfo> DailyQuestList = 2; //key DailyQuestCfgID
	map<uint32,MainQuestInfo> NormalQuestList = 3; //key NormalQuestCfgID
	map<uint32,MainQuestInfo> GuildDailyQuestList = 4; //key GuildQuestCfgID
	map<uint32,MainQuestInfo> SanXiaoAchievementList = 5; //key AchievementCfgID
	map<uint32,bool> DailyActiveBox = 6;//每日活跃的宝箱
	map<uint32,bool> NormalActiveBox = 7;//常规任务活跃
	map<uint32,MainQuestInfo> GuildBossDailyQuestList = 8; //key GuildBossQuestCfgID
}

message SkillLv
{
	string SkillName = 1;
	uint32 Level = 2;
}

message GodWeaponLv
{
	uint32 GodWeaponCfgID = 1;
	uint32 Level = 2;
}

message BattleHeroInfo
{
	uint32 HeroCfgID = 1;
	map<string,double> HeroAttr = 2; //英雄1阶属性
	uint32 Grade = 4;//英雄三消的阶数
	repeated SkillLv SkillLvList = 5;//技能的等级
	repeated GodWeaponLv GodWeaponLvList = 6;//神器的等级
	uint32 HeroLv = 7;//英雄等级
	cliAllEnum.HeroQuality HeroQuality = 8;//英雄品质
	uint32 SurfaceID = 9;//皮肤配置ID
	uint32 HeroStar = 10;//英雄星级
	repeated uint32 KTSkillList = 12;//装备开天牌技能
	uint32 FaXiangGrade = 13;//法相的阶数 == 英雄突破
	uint32 DisplayHeroStars = 14;//英雄星数和觉醒等级 只用于显示 不做计算用
	uint32 HeroAwakeLevel = 15;//觉醒的等级
	repeated uint32 KTStrongerSkillList = 16;//开天牌强化技能
}

message BattlePlayerSkillInfo
{
	int32 Index=1;//技能装备位置 -1表示未装备 1-3表示槽位
	uint32 Level =2;// 技能等级
	repeated PlayerSkillBook Book =3;//秘籍
	uint32 SkillCfgID = 4;//主角技能ID
}

message BattlePlayerInfo
{
	string PlayerID = 1;
    string PlayerName = 2;
	bool IsRobot = 3;//是机器人
	map<uint32,BattleHeroInfo> HeroInfo = 4; //key:布阵的站位
	repeated uint32 ElfinGifts = 5;//小精灵的效果
	uint32 SanXiaoScore = 6;//三消分数
	string PlayerHeadIcon = 8;//玩家头像
	uint32 HeadIconFrame = 9;//头像框
	uint32 MainPlayerCfgID = 10;//主角表配置ID
	uint32 MainPlayerLv = 12;//玩家等级
	map<string,double> MainPlayerAttr = 13; //主角色属性
	string GuildName = 14;
	repeated BattlePlayerSkillInfo MainPlayerSkillsList = 15;//主角技能
	uint32 MainPlayerSkinCfgID = 16;//主角皮肤配置ID
	uint32 GameID = 17;
	uint32 PlayerTitleID = 18;
	cliAllEnum.FactionType FactionType = 19; // 阵营类型
	uint32 WorldMatchSeason = 20;
}


message SanXiaoRank
{
	string PlayerID = 1;
	string PlayerName = 2;
	uint32 Score = 3;
	string PlayerHeadIcon = 4;
	uint32 Time = 5;//进榜的时间 毫秒
	uint32 HeadIconFrame = 6;//头像框
}

message MailSenderViewInfo
{
	 string PlayerID = 1;
	 string PlayerName = 2;
}

//存储数据库的结构
message MailViewData
{
    string MailUID = 1;// 邮件ID
    cliAllEnum.MailTarget MailTarget = 2;// 邮件类型(全服还是个人)
	cliAllEnum.MailType MailType = 3;
    string MailTitle = 4;// 邮件标题 如果是邮件模板这些字段都是空
    string MailContent = 5;// 邮件内容 如果是邮件模板这些字段都是空
    repeated ItemReq MailItem = 6;// 邮件附件 如果是邮件模板这些字段都是空
	map<string,string> MailPara = 7;//扩展参数
    uint32 CreateTs = 9;// 创建时间(s)
	uint32 ExpireTs = 10;//邮件过期时间(s)
    string PlayerID = 11;//归属人
	cliAllEnum.MailStatus MailStatus = 12;
	uint32 MailCfgID = 13;//模板配置ID 说明内容读配置表
	MailSenderViewInfo MailSenderInfo = 14;
	uint32 StartTs = 15;// 有效的开始时间(s)
}

message EmbattleSummary
{
	map<uint32,EmbattleInfo> EmbattleList = 1;//预设布阵
	uint32 EmbattleIndex= 2;//上阵的信息
}

message DayTimesInfo
{
	uint32 LastUpdateTs = 1;
	uint32 NextUpdateTs = 2;
	uint32 CurCount = 3;
	uint32 MaxCount = 4;
}

//列传
message LieZhuanInfo{
	uint32 CurLZPassLevelId  = 1;//当前通过的关卡
	map<uint32,bool> LZChapterReward = 2;//每个列传通关章节后奖励领取结果

	

	uint32 CurLZPassLevelId_Hard  = 5;//当前通过的关卡(困难)
	map<uint32,bool> LZChapterReward_Hard = 6;//每个列传通关章节后奖励领取结果(困难)
	
	uint32 CurLZPassLevelId_VeryHard  = 7;//当前通过的关卡(地狱)

	map<uint32,bool> LZChapterReward_VeryHard = 9;//每个列传通关章节后奖励领取结果(地狱)
	
}

//签到结构
message SignInViewInfo
{
	uint32 SignInCount = 1;//当前签到的次数
	uint32 NextSignInTS = 2;//下次能签到的时间
	map<uint32,bool> AccumulatedAward = 3;//累计签到奖励领取的状态
}

message PlayerGiftNtfViewInfo
{
	string SenderPlayerID = 1;
	string RevPlayerID = 2;
	string SenderPlayerName = 3;
	ItemReq GiftItem = 4;
	uint32 GameID = 5;
	bool New = 6;
	uint32 CreateTs = 7;
	string RevPlayerName = 8;
	
	string SenderPlayerHeadIcon = 9;//玩家头像
	uint32 SenderMainPlayerCfgID = 10;//主角表配置ID
	uint32 SenderMainPlayerLv = 11;//玩家等级
	uint32 SenderPlayerVipLv = 12;//玩家VIP等级
	
	string RevPlayerHeadIcon = 13;//玩家头像
	uint32 RevMainPlayerCfgID = 14;//主角表配置ID
	uint32 RevMainPlayerLv = 15;//玩家等级
	uint32 RevPlayerVipLv = 16;//玩家VIP等级
	
	uint32 SenderHeadIconFrame = 17;//头像框
	uint32 RevHeadIconFrame = 18;//头像框
}


message SkinViewInfo
{
	uint32 SkinCfgID = 1;
	uint32 EndTime = 2;
}

message PlayerDisplayInfo
{
    string AccountId = 1;
    string PlayerId = 2;
    string PlayerName = 3;
    int64 LastLoginTime = 4;
	map<string,uint32> PlayerAttr = 5;
	map<uint32,ZhenWeiInfo> ZhenWeiList = 12; //阵位 key:位置
	PVELevelInfo PVELevelInfo = 14; //PVE关卡通关信息
	HandbookInfo HandbookInfo = 15;//图鉴信息
	ClimbTowerInfoView ClimbTowerInfo = 21;//爬塔系统
	KaiTianPaiShop KaiTianPaiShop = 23; //开天牌商店
	string PlayerHeadIcon = 28;//玩家头像
	string GuildID = 30; // 公会ID
	map<uint32,DayTimesInfo> DayTimesInfo = 31;//定时更新的系统 key 为DatTimesType
	LieZhuanInfo LieZhuanInfo = 33;//列传信息
	uint32 MainPlayerID= 36;//主角ID
	map<string,uint32> BeginnerGuidanceSteps = 38;//引导步骤记录
	map<uint32,PlayerSkillInfo> PlayerSkillList = 39; // 主角技能 key为主角拥有的技能ID 
	cliAllEnum.FactionType FactionType = 41; // 阵营类型	
	AssistInfo AssistInfo=42;//协助副本信息
	XingJunInfo XingJunInfo=43;//星君赐福信息
	bool IfGetAccountBindReward=44;//是否领取过账号绑定奖励
	uint32 MainPlayerSkinCfgID = 45;//主角皮肤配置ID
	bool DownloadReward = 46; // 是否已领取过下载奖励
	uint64 ChatVideoUID = 47;//语音聊天音频ID
}

//主角技能秘籍
message PlayerSkillBook
{
	uint32 BookId=1;
	repeated uint32 Entry=2;//词条
	uint32 Level =3;
	uint32 SkillSlot = 4;//秘籍装备的槽位
	map<uint32,bool> SlotLock = 5;//锁定词条  key 孔位  value 是否锁定 
}
//主角技能
message PlayerSkillInfo
{
	int32 Index=1;//技能装备位置 -1表示未装备 1-3表示槽位
	uint32 Level =2;// 技能等级
	repeated PlayerSkillBook Book =3;//秘籍
}

message G2C_SyncPlayerBookData
{
	repeated PlayerSkillBook Book=1;
	repeated PlayerSkillBook TmpBook=2;
	
}

message G2C_SyncMoneyTreeData
{
	map<uint32,bool> MoneyTreeRollAward = 1;//招财进宝 累计摇的奖励
	uint32 MoneyTreeCoinCount = 2;//招财进宝 累计获得金币多少
}

message CreatedPlayer
{
    string PlayerId = 3;
    string PlayerName = 4;
    int64 CreateTime = 6;
    int64 BlockUntilTime = 7;
}

// 实名信息
message RealUserInfo
{
	uint32 Status = 1; // 0没有填写实名 1已经填写实名
	uint32 IsAdult = 2; // 0未成年 1 成年
	uint32 UserAge = 3; // 年龄，0或者负数表示年龄字段异常，是否成年通过年龄来判断
	uint32 Verification = 4; // 0:没过真实名校验 1:已过真实名校验。
}

//喜讯玩家信息
message XiXunViewInfo
{
	string PlayerID = 1;
    string PlayerName = 2;
	string PlayerHeadIcon = 3;
	uint32 PlayerVipLv = 4;
	uint32 PlayerLevel = 5;
	uint32 XiXunCfgID = 6;
	repeated string Para = 7;
	uint32 DianZanCount = 8;
	uint32 XiXunTs = 9;//喜讯的时间
	uint32 XiXunUID = 10;//喜讯的唯一ID	
	bool AlreadyDianZan = 11;//已经点过赞
	uint32 HeadIconFrame = 12;//头像框
}

message XiXunViewInfoList
{
	repeated XiXunViewInfo XiXunList_Self = 1;
	repeated XiXunViewInfo XiXunList_Other = 2;
}

message PoBingAwardInfo
{
	repeated uint32 GetAwardList = 1;
}

message PoBingInfo
{
	uint32 PoBingCreateTS = 1;//第一次买破冰6元礼包的时间
	map<uint32,PoBingAwardInfo> PoBingAwardInfoList = 2;//领取奖励的情况
	map<uint32,bool> PoBingDang = 3;//购买破冰的档位
}


message StoreCommodityViewInfo
{
	uint32 CommodityID = 1;
	uint32 Discount = 2;//折扣 (0 说明没有折扣)
	ItemReq ConsumeItem  = 3;//消耗道具
	ItemReq GetItem  = 4;//获得的东西
	uint32 BuyLimit = 5;//购买的上限 (0 说明无最大购买次数)
	uint32 BuyCount = 6;//购买次数
	uint32 NextUpdateTs = 7;//下次刷新数据的时间
	uint32 SortIndex = 8;//商品的顺序
	cliAllEnum.BuyLimitType BuyLimitType = 9;//限购类型
	map<string,uint32> ConditionPara = 10; //每个cliAllEnum.GeneralStoreType 各自取需要的值
	ItemReq ConsumeItem2  = 11;//消耗道具2 有些道具是可以任选一种支付的
}


message GeneralStoreViewInfo
{
	cliAllEnum.GeneralStoreType StoreType = 1;//商店类型
	map<uint32,StoreCommodityViewInfo>  StoreCommodityList = 2;//商品列表 key 为唯一ID
	uint32 RefreshCount = 3;//刷新的次数
}

// 充值信息
message RechargeInfo
{
	uint32 TotalCount = 1; // 总次数
	uint32 TotalMoney = 2; // 总金额(RMB)
	uint32 DailyCount = 3; // 每日次数
	uint32 DailyMoney = 4; // 每日金额(RMB)
	uint32 MonthCount = 5; // 每月次数
	uint32 MonthMoney = 6; // 每月金额(RMB)
	map<uint32, RechargeItemInfo> RechargeItemList = 7; // 每个商品购买信息
	uint32 DayTime = 8; // 每日次数重置日期，0点重置
	uint32 MonthTime = 9; // 月份时间, 0点重置
	uint32 FirstTime = 10; // 首次购买时间
	uint32 DailyResetTime = 11; // 5点重置
	uint32 CurWeek = 12;
    map<string, double> CurrencyTotalCounter = 13; // 累计货币统计 K:货币类型 V:总金额
    map<string, double> CurrencyDailyCounter = 14; // 每日累计货币统计 K:货币类型 V:总金额
    map<string, double> CurrencyMonthCounter = 15; // 每月累计货币统计 K:货币类型 V:总金额
}

message RechargeItemInfo
{
	uint32 TotalBuyCount = 1; // 总次数
	uint32 DailyBuyCount = 2; // 每日次数
	uint32 FirstCount = 3; // 首次剩余次数
	uint32 FirstTime = 4; // 首次日期
	uint32 DailyAwardCount = 5; // 每日奖励剩余次数
	uint32 DailyAwardResetTime = 6; // 每日奖励次数下一次重置时间
	uint32 WeekBuyCount = 8;//每周购买次数
}

// 首充奖励
message RechargeFirstAwardInfo
{
	uint32 DayCount = 1; // 领取天数
	uint32 DateTime = 2; // 最近领取时间
	uint32 NextAwardTime = 3; // 下一次可领取时间
	uint32 NextMailAwardTime = 4;   // 每日登录奖励邮件时间
}

message DaiXiaoInfo
{
	string UID = 1;
	cliAllEnum.PVEType PVEType = 2;
	uint32 LevelID = 3;//三消的LevelID或者关卡的LevelID 每一种PVEType不一样
	string SrcPlayerID = 4;//发起者PlayerID
	cliAllEnum.DaiXiaoState DaiXiaoState = 5;
	BattlePlayerInfo BattlePlayerInfo  = 6;
	string PlayerName = 7;
	string PlayerHeadIcon = 8;
	uint32 PlayerVipLv = 9;
	uint32 PlayerLevel = 10;
	uint32 CreateTs = 11;
	bool Read = 12;//已阅
	uint32 HeadIconFrame = 13;//头像框
}



message HeroAndPower
{
	uint32 HeroCfgID = 1;
	uint64 HeroPower = 2;
}

message RingTopThreePlayerViewInfo{
	string PlayerID = 1;
	string PlayerName = 2;
	uint64 FightPower = 3;
	uint32 MainPlayerCfgID = 4;
	string GuildName = 5;
	uint32 MainPlayerSkinCfgID = 7;//主角皮肤配置ID
}

message RingTopThreeViewInfo{
	repeated RingTopThreePlayerViewInfo RingTopThreePlayerInfoList = 1;
}

message SpriteStats
{
	int32 StanceID = 1;
	int32 HeroID = 2;
	int32 MonsterID = 3;
	double MaxHP = 4;
	double HP = 5;
	double IsExpelled = 6;
	uint32 HeroStar = 7;
	cliAllEnum.HeroQuality HeroQuality = 8;//英雄品质 可变化
	uint32 AwakeLevel = 9;//幻灵觉醒等级
	uint32 HeroLv = 10;//英雄等级
	uint32 FaXiangGrade = 11;//法相的阶数 == 英雄突破
	uint32 DisplayHeroStars = 12;//英雄星数和觉醒等级 只用于显示 不做计算用
}

message CharacterPerformance
{
	float DamageInflicted = 1;
	float DamageReceived = 2;
	float Healing = 3;
	uint32 Disables = 4;
	uint32 Kills = 5;
}

message SpriteStatsList
{
	repeated SpriteStats List = 1;
}

message BattleStats
{
	bool PlayerWins = 1;
	uint32 RoundID = 2;
	map<string, SpriteStatsList> SpriteStatsMap = 3; // key是阵营A、B
	double GameTime = 4;
	map<string, CharacterPerformance> CharacterPerfMap = 5; // 伤害统计，key是站位A1、C1、P1等
}


message ShangGuYiJiViewInfo
{
	uint32 CurLevelID = 1;

	repeated ItemReq GetItemList = 4;
	map<uint32,bool> LevelBox = 5;//获取关卡宝箱的情况
	uint32 LastGetAwardTs = 6;//上次领取定时奖励的时间
}


message VideoHeroViewInfo
{
	uint32 HeroCfgID = 1;
	uint32 HeroStar = 2;
	cliAllEnum.HeroQuality HeroQuality = 3;//英雄品质 可变化
	uint32 AwakeLevel = 4;//幻灵觉醒等级
	uint32 HeroLv = 5;//英雄等级
	uint32 FaXiangGrade = 6;//法相的阶数 == 英雄突破
	repeated uint32 KTSkillList = 8;//装备开天牌技能
	uint32 DisplayHeroStars = 9;//英雄星数和觉醒等级 只用于显示 不做计算用
}

message VideoEmbattleViewInfo
{
	map<uint32,VideoHeroViewInfo> HeroList = 1;
	uint64 FightPowerNum = 2;
	repeated BattlePlayerSkillInfo  MainPlayerSkillsList = 3;//主角技能
	repeated uint32 ElfinGifts = 4;//小精灵的效果
}

message GiftPackageInfo
{
	uint32 GiftPackageCfgID = 1;
	uint32 StartTs = 2;
	uint32 EndTs = 3;
	uint32 RechargeCfgID = 5;
	//uint32 SortIndex = 6;
	cliAllEnum.GiftPackageType GiftPackageType = 7;
}

message FightPowerViewVideo
{
	string BattleReportUID = 1;
	string PlayerID = 2;
	map<uint32,VideoEmbattleViewInfo> SomeEmbattleList = 3;
	uint64 FightPowerNum = 4;
	uint32 PlayerLv = 5;
	uint32 PlayerVipLv = 6;
	string PlayerName = 7;
	string PlayerHeadIcon = 8;
	string CliVer = 9;
	uint32 HeadIconFrame = 10;//头像框
}


message C2G_Login {
    string AccountId = 1;
    string PassWd = 2;
	string Token = 3;
}

message G2C_Login {
    string AccountId = 1;
	string LoginKey = 2;
    repeated CreatedPlayer CreatedPlayer = 3;
    errorNo.ErrorNo Err = 4;
	int64 SrvTime=5;
	RealUserInfo RealUserInfo = 6;
	string PlatAccountID = 7;//平台账号ID
}

message C2G_CreatePlayer {
	string AccountId = 1;
    string PlayerName = 2;
	string PlayerIcon = 3;//头像
    uint32 MainPlayerID = 4;//主角ID  对应主角配置表
}

message G2C_CreatePlayer {
    string PlayerId = 1;
	string PlayerName = 2;
	errorNo.ErrorNo Err = 3;
}


message C2G_PlayerLogin
{
    string PlayerId = 1;
    string AccountId = 2;
	string LoginKey = 3;
	map<string,string> Device=4;//玩家设备信息 统计使用
}


message G2C_PlayerLogin
{
    errorNo.ErrorNo Err  = 3;
}


message G2C_SyncPlayerDisplayInfo
{
    errorNo.ErrorNo Err = 1;
    PlayerDisplayInfo PlayerInfo = 2;
	uint32 SrvTimeTs = 3;//秒
	uint32 StartSrvTimeTs = 4;//开服时间秒
}

message C2G_HeartBeat {
}

message G2C_HeartBeat {
	uint32 SrvTimeTs = 1;//秒
}

//用于打镜像PVP的挑战者信息
message ChallengerInfo {
	string PlayerID = 1;
	uint32 Rank = 2;
}

message C2G_CreatePVEBattle {
	uint32 LevelID = 1;
	cliAllEnum.PVEType PVEType = 2;
	ChallengerInfo ChallengerInfo = 5;//挑战者信息
	string CliVer = 6;//客户端版本号
}

message G2C_EnterPVEBattle {
	uint32 LevelID = 1;
	string RoomID = 2;
	repeated BattlePlayerInfo BattlePlayerList = 3;
	repeated ItemReq ItemList = 4;//掉落的道具
	uint32 RandomSeed = 5;
	cliAllEnum.PVEType PVEType = 6;
	BattleTrialInfo TrialInfo = 9;
	string CliVer = 10;//客户端版本号
	GuildBossBattleInfo GuildBossBattleInfo = 13;
	GuardBossBattleInfo GuardBossBattleInfo =14; //镇守BOSS
	errorNo.ErrorNo Err = 20;
}


message C2G_BattleReport {
	string RoomID = 1;
	string PlayerID = 2;
	bool Win = 3;//输赢
	uint32 Round = 4;//总共战斗了几轮
	uint32 Alive = 5;//己方存活人数
	cliAllEnum.PVEType PVEType = 6;
	bool Skip = 7;//跳过
}

message G2C_BattleReport {
	errorNo.ErrorNo Err  = 1;
}

message G2C_BattleOver {
	string RoomID = 1;
	uint32 LevelCfgID = 2;
	string PlayerID = 3;
	bool Win = 4;
	uint32 Round = 5;
	uint32 Stars = 6;
	repeated ItemReq ItemList = 7;
	cliAllEnum.PVEType PVEType = 8;

	ArenaOverInfo ArenaOverInfo = 10;
	RingOverInfo RingOverInfo = 11;
	GuildBossBattleResult GuildBossBattleResult = 12;
	BattleStats BattleStats = 13;
	MatchOverInfo MatchOverInfo = 14;
	errorNo.ErrorNo Err  = 20;
}

message C2G_BattleLevelReport {
	string RoomID = 1;
	uint32 LevelCfgID = 2;
	string PlayerID = 3;
}

message G2C_BattleLevelReport {
	uint32 LevelCfgID = 1;
	repeated ItemReq ItemList = 2;
	PlayerTrialBattleInfo TrialBattleInfo = 3;
	errorNo.ErrorNo Err = 4;
}

message C2G_GMRequest {
	string cmd = 1;
	repeated string para = 2;
}

message G2C_GMResponse {
	errorNo.ErrorNo Err  = 1;
}

message C2G_UPStarsReq {
	uint32 HeroCfgID = 1;
}

message G2C_UPStarsRes {
	uint32 HeroCfgID = 1;
	errorNo.ErrorNo Err  = 2;
}

message C2G_OneKeyUPStarsReq {
	uint32 HeroCfgID = 1;
}

message G2C_OneKeyUPStarsRes {
	uint32 HeroCfgID = 1;
	uint32 OldHeroStarNum = 2;
	uint32 NewHeroStarNum = 3;
	errorNo.ErrorNo Err  = 4;
}

//阵位升级
message C2G_ZhenWeiLvUpReq {
	uint32 Postion = 1; //位置
	ItemReq Item = 2;
}

message G2C_ZhenWeiLvUpRes {
	errorNo.ErrorNo Err  = 3;
}

message C2G_EquipAnyReq {
	repeated string Equipments = 1; //EquipmentUID 数组
}

message G2C_EquipAnyRes {
	errorNo.ErrorNo Err = 1;
	repeated ItemReq EquipmentChipList = 2;
}

message C2G_UnequipAnyReq {
	repeated string Equipments = 1; //EquipmentUID 数组
}

message G2C_UnequipAnyRes {
	errorNo.ErrorNo Err = 1;
}
//一键强化
message C2G_FXEquipSlotLvUpReq {
	cliAllEnum.HeroType FaXiangType = 1;
	cliAllEnum.ItemType Slot = 2;
}
message G2C_FXEquipSlotLvUpRes{
	errorNo.ErrorNo Err = 1;
}
//装备一键升级
message C2G_FXEquipOneKeyLvUp {
	cliAllEnum.HeroType FaXiangType = 1;
	map<uint32,uint32> SlotLvUp = 2; //key: cliAllEnum.ItemType=>Item_Sub_Weapon ,value 强化的次数
}

message G2C_FXEquipOneKeyLvUp{
	errorNo.ErrorNo Err = 1;
}
////镶嵌宝石
//message C2G_EquipGemReq {
//	cliAllEnum.HeroType FaXiangType = 1;
//	string GemUID = 2;
//	cliAllEnum.ItemType EquipSlot = 3;宝石背包
//	uint32 Index = 4;
//}
//
//message G2C_EquipGemRes {
//	errorNo.ErrorNo Err = 1;
//}
////卸下宝石
//message C2G_UnequipGemReq {
//	cliAllEnum.HeroType FaXiangType = 1;
//	cliAllEnum.ItemType EquipSlot = 3;
//	uint32 Index = 4;
//}
//
//message G2C_UnequipGemRes {
//	errorNo.ErrorNo Err = 1;
//}
//
////一键卸下宝石
//message C2G_OneKeyUnequipGemReq {
//	cliAllEnum.HeroType FaXiangType = 1;
//	cliAllEnum.ItemType EquipSlot = 3;
//}
//
//message G2C_OneKeyUnequipGemRes {
//	errorNo.ErrorNo Err = 1;
//}
//
////宝石升级
//message C2G_GemLvUPReq {
//	string GemUID = 1; //目标宝石
//	bool AllLv = 2; //包含低等级
//	uint32 Limit = 3;//产出上线
//}
//
//message G2C_GemLvUPRes {
//	GemInfo GemInfo = 1;
//	errorNo.ErrorNo Err = 2;
//}


//装备手牌
message C2G_EquipHandCardReq{
	message EquipInfo{
		uint32 PositionId = 1; //位孔 id
		string HandCardId = 2;//手牌id
	}
	repeated EquipInfo InfoList=1;//装备信息列表
	uint32 EmbattleType = 2; //阵容类型


}
message G2C_EquipHandCardRes{
	errorNo.ErrorNo Err = 1;
}

//卸下手牌
message C2G_UnEquipHandCardReq{
	uint32 PositionId = 1; //位孔 id
	uint32 EmbattleType = 2; //阵容类型
}
message G2C_UnEquipHandCardRes{
	errorNo.ErrorNo Err = 1;
}
//手牌升级
message C2G_HandCardLvUpReq{
	uint32 PositionId = 1; //位孔 id
	uint32 EmbattleType = 2; //阵容类型
}
message G2C_HandCardLvUpRes{
	errorNo.ErrorNo Err = 1;
	HandCardInfo NewInfo = 2;//新的手牌
	uint32 PositionId = 3; //位孔 id
}
//手牌一键升级
message C2G_OneKeyHandCardLvUpReq{

}
message G2C_OneKeyHandCardLvUpRes{
	errorNo.ErrorNo Err = 1;
	repeated HandCardInfo ConsumeInfoList = 2; //消耗的手牌
	repeated HandCardInfo NewInfoList = 3;//新的手牌
}


//十连抽
message C2G_DrawTenReq {
	uint32 CardPoolCfgID = 1;
}

//十连抽
message G2C_DrawTenRes {
	repeated DrawItemReq ItemList = 1;
	errorNo.ErrorNo Err = 3;
	ItemReq FixedAward = 4;//固定奖励 
}

//单抽
message C2G_DrawOneReq {
	uint32 CardPoolCfgID = 1;
}

//单抽
message G2C_DrawOneRes {
	DrawItemReq Item = 1;
	errorNo.ErrorNo Err = 3;
	ItemReq FixedAward = 4;//固定奖励 
}

//激活图集
message C2G_ActiveAtlasReq {
	uint32 HeroCfgID = 1;
}

//激活图集
message G2C_ActiveAtlasRes {
	errorNo.ErrorNo Err = 1;
}

//激活羁绊
message C2G_ActiveFetterReq {
	uint32 FetterID = 1;
	uint32 HeroCfgID = 2;
}

//激活羁绊
message G2C_ActiveFetterRes {
	uint32 FetterID = 1;
	uint32 HeroCfgID = 2;
	errorNo.ErrorNo Err = 3;
}

//装备上锁
message C2G_LockEquipmentReq {
	string EquipmentUID = 1;
}

//装备上锁
message G2C_LockEquipmentRes {
	errorNo.ErrorNo Err = 1;
}

//获取背包信息
message C2G_GetBagInfoReq {
}

//获取背包信息
message G2C_GetBagInfoRes {
	map<string,ItemInfo> PropList = 1;//道具背包
	map<string,ItemInfo> MaterialList = 2;//材料背包
	map<string,ItemInfo> HandCardList = 3;//手牌背包
	map<string,EquipmentInfo>  EquipmentList = 4;//装备背包
	map<uint32,uint32> HeroChipList = 5;//英雄碎片 key:Chip ItemID
	map<string,StampInfo> StampList = 6;//印记列表
	map<string,KaiTianPaiInfo> KaiTianPaiList = 7; //key UID,value ItemCfgID 开天列表
	map<string,bool> UpdateBagInfoFlag = 8;//需要更新的 脏标记
	map<string,GodWeaponInfo> GodWeaponList = 9;//神器背包 key: UID
	map<uint32,uint64> BaseAttrItemList = 10;//基础属性背包 key ItemCfgID value
	map<string,ItemInfo> GiftBagList = 11;//礼物背包 key: UID
}


//更新玩家大厅属性
message G2C_UpdatePlayerAttrRes {
	map<string,uint32> PlayerAttr = 1;
}

//更新全体英雄列表
message G2C_UpdateHeroBagRes {
	map<uint32,HeroInfo>  HeroList = 1;//英雄列表
}

//更新个别英雄列表
message G2C_UpdateSomeHeroBagRes {
	map<uint32,HeroInfo>  HeroList = 1;//英雄列表
}


//更新爬塔信息
//message C2G_GetClimbTowerInfoReq {
//}

//更新爬塔信息
message G2C_UpdateClimbTowerInfoRes {
	ClimbTowerInfoView ClimbTowerInfo = 1;//爬塔系统
}


//更新主角技能信息
message G2C_UpdatePlayerSkills
{
	map<uint32,PlayerSkillInfo> PlayerSkillList= 1;
}


//抽卡宝箱 (明保)
message C2G_DrawCardChestReq {
}

message G2C_DrawCardChestRes {
	ItemReq Item = 1;
	errorNo.ErrorNo Err = 3;
}


//上阵
message C2G_EmbattleReq {
	uint32 EmbattleIndex = 1;//上阵
	cliAllEnum.EmbattleType EmbattleType = 2;
}

//上阵
message G2C_EmbattleRes {
	cliAllEnum.EmbattleType EmbattleType = 1;
	errorNo.ErrorNo Err = 2;
}

//保存阵位
message C2G_SaveEmbattleInfoReq 
{
	uint32 Index = 1;//预设的位置
	EmbattleInfo EmbattleInfo = 2;
	cliAllEnum.EmbattleType EmbattleType = 3;
}

//保存阵位
message G2C_SaveEmbattleInfoRes 
{
	cliAllEnum.EmbattleType EmbattleType = 1;
	errorNo.ErrorNo Err = 2;
}


//保存英雄站位(前后排 出手顺序)
message C2G_SaveHeroPostionReq
{
	cliAllEnum.EmbattleType EmbattleType = 1;
	uint32 Index = 2;//预设的位置
	map <uint32,uint32> PostionMap=3;//key 位置  value 外面的阵位 对应HeroList中的key
}

message G2C_SaveHeroPostionRes 
{
	cliAllEnum.EmbattleType EmbattleType = 1;
	errorNo.ErrorNo Err = 2;
}


//同步布阵
message G2C_SyncAllEmbattleRes {
	map<uint32,EmbattleSummary>  AllEmbattle = 1;//布阵总览 key 系统枚举EmbattleType
}

//同步图鉴信息
message G2C_SyncHandbookInfo {
	HandbookInfo HandbookInfo = 1;//图鉴信息
}

//同步神器图鉴信息
message G2C_SyncGodWeaponHandbookInfo {
	map<uint32,AtlasGodWeaponInfo> AtlasGodWeaponInfoList = 1; //key GodWeaponCfgID 
}


//召唤英雄
message C2G_SummonHeroReq {
	uint32 HeroCfgID = 1;//英雄配置表ID
}

//召唤英雄
message G2C_SummonHeroRes {
	uint32 HeroCfgID = 1;
	errorNo.ErrorNo Err = 2;
}

//召唤神器
message C2G_SummonGodWeaponReq {
	uint32 ItemCfgID = 1;//神器配置表ID
	uint32 ItemNum = 2;
}

//召唤神器
message G2C_SummonGodWeaponRes {
	uint32 ItemCfgID = 1;
	uint32 ItemNum = 2;
	errorNo.ErrorNo Err = 3;
}

//获得章节宝箱 一键领取
message C2G_GetChapterBoxReq {

}

//获得章节宝箱
message G2C_GetChapterBoxRes {
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2; 
}

//获得关卡宝箱
message C2G_GetLevelBoxReq {
	uint32 LevelCfgID = 1;
}

//获得关卡宝箱
message G2C_GetLevelBoxRes {
	errorNo.ErrorNo Err = 1;
}

//扫荡
message C2G_PVEFloorReq {
	uint32 Floor = 1;
	uint32 LevelID = 2;
	repeated ItemReq NeedItemList = 3;//扫荡目标的道具
}

//扫荡
message FloorResult {
	repeated ItemReq ItemList = 1;
}

//扫荡
message G2C_PVEFloorRes {
	map<uint32,FloorResult> FloorResult = 1;
	uint32 Floor = 2;
	errorNo.ErrorNo Err  = 3;
}

//技能等级升级
message C2G_SkillLvUpReq {
	uint32 HeroCfgID = 1;
	cliAllEnum.SkillType SkillType = 2;
}

//Specifics 技能等级升级
message G2C_SkillLvUpRes {
	errorNo.ErrorNo Err  = 1;
}

//英雄品质提高
message C2G_HeroQualityUp {
	uint32 HeroCfgID = 1;
}

//英雄品质提高
message G2C_HeroQualityUp {
	uint32 HeroCfgID = 1;
	errorNo.ErrorNo Err  = 2;
}


//更新关卡信息
//message C2G_UpdatePVELevelInfo {
//}

//更新关卡信息
message G2C_UpdatePVELevelInfo {
	PVELevelInfo PVELevelInfo = 1; //PVE关卡通关信息
}

//获取邮件
//message C2G_GetAllMailReq {
	
//}


message G2C_GetAllMailRes {
	map<string,MailViewData> AllMailData = 1;//所有邮件(私人和全服的)
}

//获取邮件奖励
message C2G_GetMailItemReq {
	repeated string MailIDList = 1;
}

//获取邮件奖励
message G2C_GetMailItemRes {
	map<string,MailViewData> ChangeMailData = 1;//邮件更新
	repeated ItemReq AwardList = 2;//获得东西
	errorNo.ErrorNo Err  = 3;
}

//更改为已读邮件
message C2G_ReadMailReq {
	repeated string MailIDList = 1;
}

//更改为已读邮件
message G2C_ReadMailRes {
	map<string,MailViewData> ChangeMailData = 1;//邮件更新
	errorNo.ErrorNo Err  = 2;
}

//删除邮件
message C2G_RemoveMailReq {
	repeated string MailIDList = 1;
}

//更改为已读邮件
message G2C_RemoveMailRes {
	repeated string MailIDList = 1;
	errorNo.ErrorNo Err  = 2;
}


//退出战斗
message C2G_QuitLevelReq {
	string RoomID = 1;
	cliAllEnum.PVEType PVEType = 2;
}

//退出战斗
message G2C_QuitLevelRes {
	string RoomID = 1;
	cliAllEnum.PVEType PVEType = 2;
	errorNo.ErrorNo Err  = 3;
}

//更新阵位信息
message G2C_UpdateZhenWeiInfo {
	map<uint32,ZhenWeiInfo> ZhenWeiList = 1; //阵位 key:位置
}

//使用道具
message C2G_UseItemReq {
	string ItemUID = 1;
	uint32 ItemNum = 2;
	uint32 PickItemCfgID = 3;//用于宝箱,选择宝箱内的哪个道具
}

//使用道具
message G2C_UseItemRes {
	repeated ItemReq GetItems = 1;
	errorNo.ErrorNo Err  = 2;
}

//装备印记
message C2G_EquipStampReq {
	string StampUID = 1;
	uint32 KaiTianPaiTabIndex = 2;
}

//装备印记
message G2C_EquipStampRes {
	errorNo.ErrorNo Err  = 1;
}

//卸下印记
message C2G_UnequipStampReq {
	uint32 KaiTianPaiTabIndex = 1;
}

//卸下印记
message G2C_UnequipStampRes {
	errorNo.ErrorNo Err  = 1;
}

//印记强化
message C2G_StampUpStarsReq {
	string TarStampUID = 1;
	repeated string StampUIDList = 2;
}

//印记强化
message G2C_StampUpStarsRes {
	StampInfo TarStamp = 1;
	errorNo.ErrorNo Err  = 2;
}

//开天牌强化
message C2G_KaiTianPaiUpStarsReq {
	repeated string KTUIDList = 1; //开天牌UID
}

//开天牌强化
message G2C_KaiTianPaiUpStarsRes {
	KaiTianPaiInfo TarKaiTianPai = 1;
	errorNo.ErrorNo Err  = 2;
}

//装备开天牌
message C2G_EquipKTReq {
	uint32 TabIndex = 1;
	uint32 Index = 2;
	string KaiTianPaiUID = 3;
}

//装备开天牌
message G2C_EquipKTRes {
	errorNo.ErrorNo Err  = 1;
}

//销售道具给系统
message C2G_SellItemToSysReq {
	string ItemUID = 1; //各各系统物品UID
	uint32 ItemCfgID = 2;
	uint32 ItemNum = 3;//卖多少
}

//销售道具给系统
message G2C_SellItemToSysRes {
	repeated ItemReq ItemList = 1;//获得
	errorNo.ErrorNo Err  = 2;
}

message KTTabInfo
{
	map<uint32,uint32> KTTabSkillList = 1;//开天牌技能列表 value abilitycgfid
	map<uint32,string> EquipKaiTianPai = 2; //key slot，value UID
	string TabName = 3;
	string StampUID = 4;
}


//获取开天页信息
message C2G_GetKaiTianTabInfoReq {
}

//获取开天页信息
message G2C_GetKaiTianTabInfoRes {
	map<uint32,KTTabInfo> KTTabInfoList = 1;
}


//获取开天商城
message C2G_GetKaiTianShopReq {
}

//获取开天商城
message G2C_GetKaiTianShopRes {
	KaiTianPaiShop KaiTianPaiShop = 1;
}


//刷新开天商城的开天牌
message C2G_RefreshKTPShopReq {
}

//刷新开天商城的开天牌
message G2C_RefreshKTPShopRes {
	errorNo.ErrorNo Err  =1;
}

//购买开天牌
message C2G_BuyKaiTianPaiReq {
	uint32 Index = 1;
}

//刷新开天商城的开天牌
message G2C_BuyKaiTianPaiRes {
	errorNo.ErrorNo Err  =1;
}

//卸下开天牌
message C2G_UnequipKTReq {
	uint32 TabIndex = 1;
	uint32 Index = 2;
}

//卸下开天牌
message G2C_UnequipKTRes {
	errorNo.ErrorNo Err  = 1;
}


//领取爬塔奖励
message C2G_GetClimbTowerBoxReq {
	uint32 LevelID = 1;
}

//领取爬塔奖励
message G2C_GetClimbTowerBoxRes {
	uint32 LevelID = 1;
	errorNo.ErrorNo Err  = 2;
}

//开天牌商店上锁
message C2G_LockKTPShopReq {
}

//开天牌商店上锁
message G2C_LockKTPShopRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_EquipGodWeaponReq {
	string GodWeaponUID = 1; //UID
	uint32 HeroCfgID = 2;
}

message G2C_EquipGodWeaponRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_UnequipGodWeaponReq {
	uint32 HeroCfgID = 1;
}

message G2C_UnequipGodWeaponRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GodWeaponLvUpReq {
	string GodWeaponUID = 1; //UID
}

message G2C_GodWeaponLvUpRes{
	string GodWeaponUID = 1; //UID
	errorNo.ErrorNo Err = 2;
}

message C2G_GodWeaponResetReq {
	string GodWeaponUID = 1; //UID
}

message G2C_GodWeaponResetRes{
	string GodWeaponUID = 1; //UID
	repeated ItemReq ItemList = 2;//吐出的产物
	errorNo.ErrorNo Err = 3;
}

message C2G_GetFriendSysReq {
}

message G2C_GetFriendSysRes{
	FriendInfoView FriendInfoView = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_ArenaChallengeList{
}

message G2C_ArenaChallengeList{
	map<uint32,ArenaRankInfoView>  ChallengerList = 1;
	uint32 SeasonTs = 2;
	errorNo.ErrorNo Err = 3;
}

//message G2C_SyncArenaRankInfo{
//	errorNo.ErrorNo Err = 1;
//	bool RankDown = 2;//排名下降
//}

message C2G_GetBattleVideoReq{
	string VideoID = 1;
	cliAllEnum.PVEType PVEType = 2;
}

message G2C_GetBattleVideoRes{
	BattleVideo Video = 1;
	cliAllEnum.PVEType PVEType = 2;
	errorNo.ErrorNo Err = 3;
}

message C2G_ArenaRankListReq{
	uint32 StartIndex = 1;
	uint32 EndIndex = 2; //最大是10
}

message G2C_ArenaRankListRes{
	map<uint32,ArenaRankInfoView>  RankList = 1;
	uint32 TotalCount = 2;
	errorNo.ErrorNo Err = 5;
}


message C2G_ResolveItemReq {
	repeated string ItemsUID = 1; //UID 适用于用UID作为key的道具
	cliAllEnum.ItemType ItemType = 2;//道具类型
}

message G2C_ResolveItemRes{
	repeated ItemReq ItemList = 1;//吐出的产物
	errorNo.ErrorNo Err = 2;
}

message C2G_ReconnectReq{
	string AccountID = 1;
	string PlayerID = 2;
	uint32 LastDownStreamID = 3;
}

message G2C_ReconnectRes{
	string AccountID = 1;
	string PlayerID = 2;
	uint32 SrvTimeTs = 4;//秒
	uint32 LastCliMsgStreamID = 5; //最后一次收到客户端消息包流
    errorNo.ErrorNo Err  = 6;
}

message C2G_GetGeneralStoreReq{
	cliAllEnum.GeneralStoreType GeneralStoreType = 1;
}

message G2C_GetGeneralStoreRes{
	map<uint32,GeneralStoreViewInfo> AllGeneralStoreViewInfo = 1;//key 为GeneralStoreType枚举
    errorNo.ErrorNo Err  = 2;
}

message G2C_SyncGeneralStoreInfo{
	map<uint32,GeneralStoreViewInfo> GeneralStoreViewInfo = 1;//key 为GeneralStoreType枚举
}

message C2G_BuyGeneralStoreReq{
	uint32 BuyCount = 1;
	cliAllEnum.GeneralStoreType GeneralStoreType = 2;
	uint32 CommodityID = 3;
	uint32 ConsumeItemCfgID = 4;//有两种支付方式的时候需要带上这个参数
}

message G2C_BuyGeneralStoreRes{
	cliAllEnum.GeneralStoreType GeneralStoreType = 1;
	ItemReq GetItem = 3; 
	GeneralStoreViewInfo GeneralStoreViewInfo = 4;
    errorNo.ErrorNo Err  = 5;
}

//这个是竞技场获取战报接口
message C2G_HistoryBattleReport{
	cliAllEnum.BattleReportType BattleReportType = 1;
	cliAllEnum.PVEType PVEType = 2;
}

//这个是竞技场获取战报接口
message G2C_HistoryBattleReport{
	cliAllEnum.BattleReportType BattleReportType = 1;
	repeated ArenaBattleReport ArenaBattleReportList = 2;//竞技场战报列表 擂台也用这个
	//repeated ArenaBattleTopReport ArenaBattleTopReportList = 3;//全服前十名战报
	cliAllEnum.PVEType PVEType = 4;
	errorNo.ErrorNo Err  = 5;
}

// 公会基础信息
message GuildBasicInfo {
	string GuildID = 1;
	string Name = 2;
	uint32 OldIconID = 3; // 上一次使用
	uint32 IconID = 4;
	uint32 Level = 5;
	uint32 GuildMoney = 6;	// 资金
	uint32 Prestige = 7; // 威望
	uint32 MemberCount = 8; //人数
	uint32 MaxMemberCount = 9; //最大人数
	uint64 Fighting = 10; // 战力
	string Notice = 11; // 通知
	string OwnerPlayerID = 12; // 会长
	string OwnerName = 13; // 会长名称
	uint32 CreateTime = 14; // 创建时间
	uint32 DisbandTime = 15; // 解散时间
	uint32 ModifyNameCount = 16; // 改名次数
	uint32 BroadcastMailCD = 17; // 群发邮件CD
	cliAllEnum.GuildState State = 18; // 状态
	string Introduce = 19; // 公会介绍
	cliAllEnum.FactionType FactionType = 20; // 阵营类型
	uint32 MaxOwnGuardNum=21;//拥有镇守最大数量
	uint32 GuardInviteProtectTime=22;//镇守入住保护时间
	uint32 MaxGuildMoney = 23;	// 历史最大资金
}

// 公会成员
message GuildMemberInfo {
	string PlayerID = 1; 
	cliAllEnum.GuildJobType Job = 2; // 职务
	uint32 LoginTime = 3; // 最近上线时间
	uint32 LogoutTime = 4; // 最近下线时间
	uint32 JoinTime = 5; // 加入时间
	uint32 Contribution = 6;//工会贡献值
	uint32 WeekContribution = 7;//工会周贡献值
	uint32 ContributionTime = 8;//工会贡献时间戳
	uint64 Fighting = 10; // 战力
	string PlayerName = 11;
	string PlayerHeadIcon = 12;
	uint32 PlayerVipLv = 13;
	uint32 PlayerLevel = 14;
	bool JoinGuardBoss = 15;//
	bool IsOnline = 16;
	uint32 HelpDaiXiaoCount = 17;
	uint32 MainPlayerCfgID = 18;
	uint32 HeadIconFrame = 19;//头像框
	uint32 MainPlayerSkinCfgID = 20;//主角皮肤配置ID
	uint32 PlayerTitleID = 21;//玩家称号
}

// 公会建筑
message GuildBuilding {
	uint32 BuildingCfgID = 1;
	uint32 Level = 2;
}


// 公会图标
message GuildIcon {
	uint32 IconID = 1; 
	string From = 2; // 来源
	uint32 ExpireTime = 3; //过期时间
}

// 公会申请
message GuildApply {
	string PlayerID = 1;
	string Name = 2; // 名称
	uint32 Level = 3; // 等级
	uint64 Fighting = 4; // 战力
	uint32 CreateTime = 5; //申请时间
}

// 公会设置
message GuildSetting {
	uint32 Level = 1; // 等级
	uint64 Fighting = 2; // 战力
	uint32 AutoCheck = 3; // 是否托管 0: 手动 1:托管
}

// 公会邀请
message GuildInvite {
	string GuildID = 1; // 
	uint32 IconID = 2; // 图标
	string Name = 3; // 名称
	uint32 Level = 4; // 等级
	uint32 MemberCount = 5; // 人数
	uint32 MaxMemberCount = 6; // 最大人数
	string OwnerName = 7; // 会长
}

// 公会推荐
message GuildRecommend {
	string GuildID = 1; // 
	uint32 IconID = 2; // 图标
	string Name = 3; // 名称
	uint32 Level = 4; // 等级
	uint32 MemberCount = 5; // 人数
	uint32 MaxMemberCount = 6; // 最大人数
	string OwnerName = 7; // 会长
	uint64 Fighting = 8;
	string Introduce = 9;
	GuildJoinCondition JoinCondition = 10; // 加入条件
	uint32 DisbandTime = 11; // 解散时间
	cliAllEnum.GuildState State = 12; // 状态
}

// 公会加入条件
message GuildJoinCondition {
	uint32 Level = 1; // 等级
	uint64 Fighting = 2; // 战力
}

// 公会动态消息
message GuildMsg {
	uint32 MsgID = 1; // 消息模板ID
	string Msg = 2; // 消息文本
	uint32 Time = 3; // 时间
	repeated string Param=4;//参数
	string ID = 5; // 消息唯一ID
	bool IsInvestigate = 6; // 是否已侦查
}

// 公会建筑事件
message GuildBuildingEvent {
	uint32 StartTime = 1; // 开始时间
	uint32 EndTime = 2; // 结束时间
	uint32 AccTime = 3; // 加速时间
}

// 公会权限
message GuildAuthority {
	repeated uint32 AuthorityList = 1; // 权限ID列表
}

// 拍卖品
message AuctionItemReq{
	uint32 auction_id = 1;
	uint32 num = 2;
	uint32 from = 3; // 来源
}

// 公会拍卖竞价
message GuildItemAuctionBid {
	string ID = 1; // 物品ID
	string PlayerID = 2; // 出价人
	ItemReq Item = 3; // 出价
}

// 公会拍卖物品
message GuildAuctionItem {
	ItemReq Item = 1;
	uint32 Num = 2;
	repeated GuildItemAuctionBid BidList = 3; // 出价列表
	repeated GuildItemAuctionBid OkList = 4; // 已购买列表
	uint32 BidPos = 5; // 出价位置
	uint32 StartTime = 6; // 开始时间
	uint32 EndTime = 7; // 结束时间
	cliAllEnum.GuildAuctionItemState State = 8; // 拍卖状态
	uint32 AuctionID = 9; // 动态唯一标识
	uint32 AuctionCfgID = 10; // 配置ID
	uint32 From = 11; // 来源
}

message GuildAuctionRecord {
	ItemReq Item = 1; // 物品
	ItemReq Price = 2; // 出价
	string PlayerID = 3; // 出价人
	cliAllEnum.AuctionBidType BidType = 4; // 0:流拍 1:一口价 2:竞拍价
	uint32 Time = 5; // 时间
	uint32 From = 6; // 来源
}

// 拍卖
message GuildAuction {
	map<uint32, GuildAuctionItem> AuctionItemList = 1; // 拍卖物品列表
	cliAllEnum.GuildAuctionState State = 2; // 状态
	uint32 StartTime = 3; // 开始时间
	uint32 EndTime = 4; // 结束时间
}

// 公会Boss
message GuildBoss {
	uint32 GroupID = 1;
	uint32 Level = 2;
	uint32 SanXiaoLevelID = 3;
	map<uint32,double> Hp = 4;
	map<uint32,double> MaxHp = 5;
	uint32 StartTime = 6; // 开启时间戳
	uint32 ResetTime = 7; // 重置时间戳
	uint32 BossLevelCfgID = 8;
	string DayID = 9; // 每日标识ID
	bool GroupPassed = 10; // 当前组已通关
	map<string,double> DamageHpList = 11; // 伤害统计
}

// Boss战斗开启信息
message GuildBossBattleInfo {
	string DayID = 1; // 每日标识ID
	string GuildID = 2;
	map<uint32,double> Hp = 3;
	map<uint32,double> MaxHp = 4;
	bool IsQuick = 5; // 是否快速战斗
}

// 快速战斗结果
message GuildBossBattleResult {
	uint32 BossLevelCfgID = 1;
	map<uint32,double> Hp = 2;
	map<uint32,double> MaxHp = 3;
	double DamageHp = 4;
	uint32 State = 5; //1:战斗中  2:战斗结束
	repeated ItemReq ItemList = 6; // 奖励
}

message GuildQuest {
	repeated uint32 QuestList = 1; // 公会任务
	repeated uint32 PublishQuestList = 2; // 发布任务
	uint32 ResetTime = 3; // 重置时间戳
}

// 公会发展任务
message GuildDevelopQuestChapter {
	uint32 GroupID = 1;
	uint32 StartTime = 2;
	uint32 EndTime = 3;
	map<uint32,MainQuestInfo> QuestList = 4; // key QuestCfgID
	cliAllEnum.GuildDevelopChapterState State = 5;
}

// 公会发展
message GuildDevelopQuestInfo {
	uint32 CurChapterID = 1;
	map<uint32,GuildDevelopQuestChapter> ChapterList = 2; // key GroupID
}

// 公会公共任务奖励记录
message GuildDevelopQuestAwardInfo {
	map<uint32,bool> QuestAwardList = 1; // key QuestCfgID
	map<uint32,bool> GroupAwardList = 2; // key GroupID
}


//学社镇守
message GuildGuard
{
	repeated uint32 OwnGuardIdList= 1;//入住的学社镇守的ID
	repeated uint32 SignGuardIdList =2;// 标记的学社镇守的ID
	map<uint32,uint32> InviteTime=3;// 每个镇守当日剩余邀请次数
	uint32 PunishEndTime =4;// 邀请失败惩罚结束时间
	map<uint32,uint32> RemoveProtectTime=5;// 解除保护时间
	uint32 ResetTime = 6; // 每日邀请次数重置时间戳
}
// 学社镇守Boss战斗开启信息
message GuardBossBattleInfo 
{
	double CurHp = 1; //boss当前血量
	double MaxHp = 2; //boss最大血量
	double Damage =3; //BOSS 或者守方 打出的伤害
	double AttackDamage=4;//攻击方打出的伤害
}

message AuctionBonus
{
	ItemReq Item = 1; // 拍卖分红
	map<string, ItemReq> BonusList = 2; // 拍卖分红 K: PlayerID
	map<string, uint32> GetList = 3; // 获取标识 K: PlayerID
}

// 公会信息
message GuildInfo {
	GuildBasicInfo BasicInfo = 1;
	GuildSetting Setting = 2;
	map<string,GuildMemberInfo> MemberList = 3;
	map<uint32,GuildBuilding> BuildingList = 4;
	repeated GuildApply ApplyList = 5;
	repeated GuildIcon IconList = 6;
	repeated GuildMsg MsgList = 7;
	map<string,GuildAuthority> JobAuthority = 8;
	map<uint32,GuildBuildingEvent> BuildingEventList = 9;
	GuildAuction Auction = 10; // 拍卖
	GuildBoss Boss = 11;
	map<uint32, AuctionItemReq> ItemList = 12; // 公会仓库
	GuildQuest Quest = 13; // 公会任务
	GuildGuard GuildGuard=14;//学社镇守
	repeated GuildAuctionRecord AuctionRecordList = 15; // 拍卖记录
	map<uint32, AuctionBonus> AuctionBonusList = 16; // 拍卖分红 K: 拍卖品来源
	uint32 ResetTime = 17;
	uint32 MsgInvestigateCount = 18; // 侦查次数
	uint32 ItemNum = 19; // 仓库物品数量
	GuildDevelopQuestInfo DevelopQuestInfo = 20; // 发展任务
}

// 公会玩家相关信息
message GuildPlayerInfo {
	repeated uint32 BossGroupAwardList = 1; // 公会BOSS奖励领取列表
	map<int32,int32> BossCountAwardList = 2; // 公会BOSS挑战次数奖励领取列表
	map<uint32, uint32> AuctionBidList = 3; // 已竞拍列表 k: 拍卖品AuctionID v: Datetime
	map<uint32, bool> AuctionCollection = 4; // 拍卖品收藏 k: 拍卖品AuctionID v: true
	uint32 AuctionStartTime = 5;
	GuildDevelopQuestAwardInfo DevelopQuestAwardInfo = 6; // 公会发展任务奖励领取
}

// 创建公会
message C2G_CreateGuildReq {
	string Name = 1;
	uint32 IconID = 2;
	string Introduce = 3; // 简介
}
message G2C_CreateGuildRes {
	errorNo.ErrorNo Err = 1;
}

// 获取公会信息
message C2G_GuildGetInfoReq {
}
message G2C_GuildGetInfoRes {
	errorNo.ErrorNo Err = 1;
	GuildInfo GuildInfo = 2;
}

// 公会信息同步
message C2G_GuildSyncInfoReq {
	repeated string UpdateFlags = 1;
}
message G2C_GuildSyncInfoRes {
	errorNo.ErrorNo Err = 1;
	GuildInfo GuildInfo = 2;
	repeated string UpdateFlags = 3;
}

message G2C_GuildSyncMemberStateRes {
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	cliAllEnum.GuildMemberState State = 3;
}

// 修改公会名字
message C2G_GuildModifyNameReq {
	string Name = 1;
}
message G2C_GuildModifyNameRes {
	string Name = 1;
	errorNo.ErrorNo Err = 2;
}

// 修改公会图标
message C2G_GuildModifyIconReq {
	uint32 IconID = 1;
}
message G2C_GuildModifyIconRes {
	errorNo.ErrorNo Err = 1;
	uint32 IconID = 2;
	uint32 OldIconID = 3;
}

// 修改公会公告
message C2G_GuildModifyNoticeReq {
	string Notice = 1;
}
message G2C_GuildModifyNoticeRes {
	errorNo.ErrorNo Err = 1;
	string Notice = 2;
}

// 转让公会
message C2G_GuildTransferReq {
	string TargetPlayerID = 1;
}
message G2C_GuildTransferRes {
	errorNo.ErrorNo Err = 1;
}

// 解散公会
message C2G_GuildDisbandReq {
}
message G2C_GuildDisbandRes {
	errorNo.ErrorNo Err = 1;
}

// 取消解散公会
message C2G_GuildCancelDisbandReq {
}
message G2C_GuildCancelDisbandRes {
	errorNo.ErrorNo Err = 1;
}

// 申请
message C2G_GuildApplyListReq {
}
message G2C_GuildApplyListRes {
	errorNo.ErrorNo Err = 1;
	repeated GuildApply ApplyList = 2;
}

message C2G_GuildApplyReq {
	string GuildName = 1;
}
message G2C_GuildApplyRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildApplyAgreeReq {
	string PlayerID = 1;
}
message G2C_GuildApplyAgreeRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildApplyRefuseReq {
	string PlayerID = 1;
}
message G2C_GuildApplyRefuseRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildLeaveReq {
}
message G2C_GuildLeaveRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildKickReq {                                                                                                                                                     
	string PlayerID = 1;
}
message G2C_GuildKickRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildAppointReq {
	string PlayerID = 1;
	uint32 Job = 2;
}
message G2C_GuildAppointRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildRelieveReq {
	string PlayerID = 1;
}
message G2C_GuildRelieveRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildCheckSettingReq {
	uint32 Level = 1;
	uint64 Fighting = 2;
	uint32 AutoCheck = 3;
}
message G2C_GuildCheckSettingRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildBroadcastMailReq {
	string Content = 1;
}
message G2C_GuildBroadcastMailRes {
	uint32 BroadcastMailCD = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildInviteReq {
	string PlayerID = 1;
}
message G2C_GuildInviteRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildInviteAgreeReq {
	string GuildID = 1;
}
message G2C_GuildInviteAgreeRes {
	string GuildID = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildInviteRefuseReq {
	string GuildID = 1;
}
message G2C_GuildInviteRefuseRes {
	errorNo.ErrorNo Err = 1;
}

message C2G_GuildInviteListReq {
}
message G2C_GuildInviteListRes {
	repeated GuildInvite InviteList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildRecommendReq {
}
message G2C_GuildRecommendRes {
	repeated GuildRecommend RecommendList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildSearchByNameReq {
	string Name = 1;
}
message G2C_GuildSearchByNameRes {
	repeated GuildRecommend RecommendList = 1;
	errorNo.ErrorNo Err = 2;
}

// 建筑升级
message C2G_GuildBuildingUpReq {
	uint32 BuildingCfgID = 1;
}
message G2C_GuildBuildingUpRes {
	errorNo.ErrorNo Err = 1;
}

// 建筑升级加速
message C2G_GuildBuildingUpAccReq {
	uint32 BuildingCfgID = 1;
	uint32 Type = 2; // 加速类型 1:加速一小时 2:全部加速
}
message G2C_GuildBuildingUpAccRes {
	errorNo.ErrorNo Err = 1;
	uint32 BuildingCfgID = 2;
}

message C2G_GuildMemberListReq {
}
message G2C_GuildMemberListRes {
	errorNo.ErrorNo Err = 1;
	GuildBasicInfo BasicInfo = 2;
	map<string,GuildMemberInfo> MemberList = 3;
}

message C2G_GuildBuildingListReq {
}
message G2C_GuildBuildingListRes {
	errorNo.ErrorNo Err = 1;
	map<uint32,GuildBuilding> BuildingList = 2;
	map<uint32,GuildBuildingEvent> BuildingEventList = 3;
}

message C2G_GuildMsgListReq {
}
message G2C_GuildMsgListRes {
	errorNo.ErrorNo Err = 1;
	repeated GuildMsg MsgList = 2;
}

// 消息侦查
message C2G_GuildMsgInvestigateReq {
	string ID = 1;
}
message G2C_GuildMsgInvestigateRes {
	errorNo.ErrorNo Err = 1;
	string ID = 2;
}

message C2G_GuildDonateReq {
	uint32 DonateCfgID = 1;
}
message G2C_GuildDonateRes {
	uint32 GuildMoney = 1;
	errorNo.ErrorNo Err = 2;
}

// 修改公会介绍
message C2G_GuildModifyIntroduceReq {
	string Introduce = 1;
}
message G2C_GuildModifyIntroduceRes {
	string Introduce = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildAuthoritySaveReq {
	map<string,GuildAuthority> JobAuthority = 1;
}
message G2C_GuildAuthoritySaveRes {
	map<string,GuildAuthority> JobAuthority = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildGetAuthorityInfoReq {
}
message G2C_GuildGetAuthorityInfoRes {
	map<string,GuildAuthority> JobAuthority = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildAuctionGetReq {
}
message G2C_GuildAuctionGetRes {
	GuildAuction Auction = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildAuctionBidReq {
	uint32 AuctionID = 1;
	uint32 Type = 2; // 1:竞价 2:一口价
}
message G2C_GuildAuctionBidRes {
	errorNo.ErrorNo Err = 1;
	GuildAuction Auction = 2;
	uint32 Type = 3; // 1:竞价 2:一口价
}

// 收藏
message C2G_GuildAuctionCollectionReq {
	uint32 AuctionID = 1;
	bool State = 2; // true:收藏 false:取消收藏
}
message G2C_GuildAuctionCollectionRes {
	errorNo.ErrorNo Err = 1;
	uint32 AuctionID = 2;
	bool State = 3;
}

message C2G_GuildSkillUpReq {
	uint32 SkillID = 1;
}
message G2C_GuildSkillUpRes {
	map<uint32,uint32> GuildSkillList = 1;// 公会技能
	errorNo.ErrorNo Err = 2;
}

message C2G_GuildGetBossInfoReq {
}
message G2C_GuildGetBossInfoRes {
	errorNo.ErrorNo Err = 1;
	GuildBoss Boss = 2;
}

message C2G_GuildBossQuickBattleReq {
}
message G2C_GuildBossQuickBattleRes {
	errorNo.ErrorNo Err = 1;
	GuildBoss Boss = 2;
}

message C2G_GuildBossQuickBattleCancelReq {
}
message G2C_GuildBossQuickBattleCancelRes {
	errorNo.ErrorNo Err = 1;
}

message G2C_SyncGuildBossBattleResultRes {
	errorNo.ErrorNo Err = 1;
	GuildBossBattleResult GuildBossBattleResult = 2;
}

message C2G_GuildBossTakeAwardReq {
	uint32 GroupID = 1;
}
message G2C_GuildBossTakeAwardRes {
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
}

message C2G_GuildBossBuyBattleCountReq {
	uint32 Count = 1;
}
message G2C_GuildBossBuyBattleCountRes {
	errorNo.ErrorNo Err = 1;
}

message G2C_SyncGuildPlayerInfo {
	errorNo.ErrorNo Err = 1;
	GuildPlayerInfo GuildPlayerInfo = 2;
}

message C2G_GuildPublishQuestReq {
	repeated uint32 PublishQuestList = 1; // 发布任务
}
message G2C_GuildPublishQuestRes {
	errorNo.ErrorNo Err = 1;
	GuildQuest Quest = 2;
}

message C2G_GuildGetBasicInfoReq {
	string GuildID = 1;
}
message G2C_GuildGetBasicInfoRes {
	errorNo.ErrorNo Err = 1;
	GuildBasicInfo BasicInfo = 2;
	GuildJoinCondition GuildJoinCondition = 3;
}

// 个人拍卖记录
message C2G_GuildAuctionPlayerRecordReq {
}
message G2C_GuildAuctionPlayerRecordRes {
	errorNo.ErrorNo Err = 1;
	repeated GuildAuctionRecord AuctionRecordList = 3; // 拍卖记录
}

// 招募
message C2G_GuildRecruitReq {
	string ChatMsg = 1;
	string Data = 2;//扩展信息
}
message G2C_GuildRecruitRes {
	errorNo.ErrorNo Err = 1;
}

// 拍卖分红领取
message C2G_GuildGetAuctionBonusReq {
	uint32 From = 1; // 分红来源
}
message G2C_GuildGetAuctionBonusRes {
	errorNo.ErrorNo Err = 1;
	ItemReq Item = 2;
}

message C2G_FloorArenaReq {
	//string PlayerID = 1;
	uint32 FloorNum = 2;
}
message G2C_FloorArenaRes {
	map<uint32,FloorResult> FloorResult = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_SyncQuestInfoReq{
	cliAllEnum.QuestDetailType QuestDetailType = 1;
}

//message G2C_SyncQuestInfoRes{
//	cliAllEnum.QuestDetailType QuestDetailType = 1;
//	QuestInfoView QuestInfoView = 2;
//    errorNo.ErrorNo Err  = 3;
//}

message G2C_SyncAchievementInfoRes{
	map<uint32,MainQuestInfo> AchievementList = 1; //key AchievementCfgID
    errorNo.ErrorNo Err  = 2;
}

message G2C_SyncNormalQuestInfoRes{
	map<uint32,MainQuestInfo> NormalQuestList = 1; //key NormalQuestCfgID
	map<uint32,bool> NormalActiveBox = 2;//常规任务活跃
    errorNo.ErrorNo Err  = 3;
}

message G2C_SyncDailyQuestInfoRes{
	map<uint32,MainQuestInfo> DailyQuestList = 1; //key DailyQuestCfgID
	map<uint32,bool> DailyActiveBox = 2;//每日活跃的宝箱
	errorNo.ErrorNo Err  = 3;
}
//周常
message G2C_SyncWeekQuestInfoRes{
	map<uint32,MainQuestInfo> DailyQuestList = 1; //key DailyQuestCfgID
	uint32 WeekQuestResetTs=2;//周常任务重置时间
	errorNo.ErrorNo Err  = 3;
}

message G2C_SyncGuildQuestInfoRes{
	errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> GuildDailyQuestList = 2; //key GuildQuestCfgID
}

message G2C_SyncGuildBossQuestInfoRes{
	errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> GuildBossDailyQuestList = 2; //key GuildBossQuestCfgID
}

message G2C_SyncHomeHotelQuestInfoRes{
	errorNo.ErrorNo Err = 1;
	HomeHotelQuestInfo HomeHotelQuestInfo = 2;
}

message G2C_SyncSanXiaoAchievementInfoRes {
	errorNo.ErrorNo Err  = 1;
	map<uint32,MainQuestInfo> SanXiaoAchievementList = 2;
}

message G2C_SyncSanXiaoStatisticsQuestInfoRes {
	errorNo.ErrorNo Err  = 1;
	map<uint32,MainQuestInfo> SanXiaoStatisticsQuestList = 2;
}

message G2C_SyncHeroQuestInfoRes {
    errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> HeroQuestList = 2; //key HeroQuestCfgID
}

message G2C_SyncWorldMatchQuestInfoRes {
    errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> WorldMatchQuestList = 2; //key match_daily_reward id
}


message G2C_SyncWorldMatchSeasonScoreQuestInfoRes {
    errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> WorldMatchSeasonScoreAward = 2;//匹配赛 赛季段位奖励 key match_level_reward
}


message C2G_GetWorldMatchPlayerInfoReq {
}

message G2C_GetWorldMatchPlayerInfoRes {
	G2C_GetRankListRes G2C_GetRankListRes = 1;
	uint32 WorldMatchWinCount = 2;//世界匹配赛赢的场次
	uint32 WorldMatchTotalCount = 3;//世界匹配赛总的场次
	uint32 CurSeason = 4;//当前赛季
	uint32 SeasonSettlementEndTs = 5;

	uint32 SeasonMaxScore = 8;
	uint32 WorldMatchCurSanXiaoCfgID = 9;
	uint32 LastScore = 10;
	bool MatchBeBeaten_2 = 11;//匹配被打了 匹配界面的被打标记
	uint32 LastMatchRank = 12;
}


message C2G_GetQuestAwardReq{
	repeated uint32 QuestCfgIDList = 1;
	cliAllEnum.QuestDetailType QuestDetailType = 2;
}
message G2C_GetQuestAwardRes{
	repeated ItemReq AwardList = 1;
    errorNo.ErrorNo Err  = 2;
}

message C2G_GetHomeQuestAwardReq{
	repeated uint32 QuestCfgIDList = 1;
	uint32 HomeQuestLable = 2;
}
message G2C_GetHomeQuestAwardRes{
	repeated ItemReq AwardList = 1;
    errorNo.ErrorNo Err  = 2;
}

message C2G_SyncDayTimesInfoReq{
}
message G2C_SyncDayTimesInfoRes{
	map<uint32,DayTimesInfo> DayTimesInfo = 1;//定时更新的系统 key 为DatTimesType
    errorNo.ErrorNo Err  = 2;
}

message C2G_GetDailyActiveValueReward{
	cliAllEnum.ActiveNumType ActiveNumType = 1;
	uint32 ActiveNumCfgID = 2;
}
message G2C_GetDailyActiveValueReward{
	cliAllEnum.ActiveNumType ActiveNumType = 1;
	uint32 ActiveNumCfgID = 2;
	QuestInfoView QuestInfoView = 3;
	repeated ItemReq AwardList = 4;
    errorNo.ErrorNo Err  = 5;
}

message C2G_GetNormalQuestGroupReward{
}
message G2C_GetNormalQuestGroupReward{
	uint32 NormalQuestGroupID = 1;
	QuestInfoView QuestInfoView = 2;
	repeated ItemReq AwardList = 3;
    errorNo.ErrorNo Err  = 4;
}

// 排行榜任务
message QuestRankItem
{
	string PlayerID = 1;
	uint32 FinishTime = 2;
}

message QuestRankList
{
	repeated QuestRankItem RankList = 1;
}

message RankQuestInfo
{
	map<uint32,MainQuestInfo> QuestList = 1; //排行榜任务   key QuestCfgID
	map<uint32,QuestRankList> QuestRankList = 2; //
}

message QuestRankItemView
{
	uint32 FinishTime = 1; // 任务完成时间
	string PlayerID = 2;
	string PlayerName = 3;
	string PlayerHeadIcon = 4;
	string GuildName = 5;
	string PlayerTitle = 6;
	uint32 PlayerLv = 7;
	uint32 MainPlayerCfgID = 8;
	uint32 PlayerVipLv = 9;
	cliAllEnum.FactionType FactionType = 10;
	uint32 HeadIconFrame = 11;//头像框
}

message C2G_GetRankQuestInfoReq{
}
message G2C_GetRankQuestInfoRes{
    errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> QuestList = 2; //排行榜任务   key QuestCfgID
	map<uint32,QuestRankItemView> FirstList = 3; // key QuestCfgID
	map<uint32,bool> RankQuestAwardTaked = 4;//排行榜任务领取
}

message C2G_GetRankQuestByIDReq{
	uint32 QuestCfgID = 1;
}
message G2C_GetRankQuestByIDRes{
	uint32 QuestCfgID = 1;
	repeated QuestRankItemView RankList = 2;
}

message G2C_SyncRankQuestInfoRes{
    errorNo.ErrorNo Err  = 1;
	map<uint32,MainQuestInfo> QuestList = 2; //排行榜任务   key AchievementCfgID
	map<uint32,QuestRankItemView> FirstList = 3; // key QuestCfgID
	map<uint32,bool> RankQuestAwardTaked = 4;//排行榜任务领取
}

message C2G_GetRankQuestAwardReq{
	uint32 QuestCfgID = 1;
}
message G2C_GetRankQuestAwardRes{
	errorNo.ErrorNo Err  = 1;
	uint32 QuestCfgID = 2;
	repeated ItemReq AwardList = 3;
}

//同步列传信息
message G2C_SyncLieZhuanInfoRes {
	LieZhuanInfo LieZhuanInfo = 1;
}

message C2G_GetLZChapterReward{
	uint32 LieZhuanInfoCfgID = 1;
	cliAllEnum.PVEType PVEType = 2;
}

message G2C_GetLZChapterReward{
	uint32 LieZhuanInfoCfgID = 1;
	repeated ItemReq AwardList = 2;
    errorNo.ErrorNo Err  = 3;
}

// 获取排行信息
message GuildRankItem
{
	string Name = 1;
	uint32 Icon = 2;
	uint32 Level = 3;
	uint32 MemberCount = 4;
	string OwnerName = 5;
	uint64 Fighting  = 6;
	uint32 MaxMemberCount = 7; //最大人数
	cliAllEnum.FactionType FactionType = 8; // 阵营类型
	string GuildID = 9;
	uint64 Score = 10; // 排序数值
}
//玩家等级排行
message PlayerLvRankItem
{
	string PlayerID = 1;
	string PlayerName = 2;
	string PlayerHeadIcon = 3;
	uint32 PlayerLv= 4;
	uint32 HeadIconFrame = 5;//头像框
}
//玩家战力排行
message TotalFightingRankItem
{
	string PlayerID = 1;
	string PlayerName = 2;
	string PlayerHeadIcon = 3;
	uint64 PlayerFight= 4;
	uint32 HeadIconFrame = 5;//头像框
}
//图鉴等级排行
message HandbookRankItem
{
	string PlayerID = 1;
	string PlayerName = 2;
	string PlayerHeadIcon = 3;
	uint64 Lv = 4;
	string GuildName = 5;
	string PlayerTitle = 6;
	uint32 HeadIconFrame = 7;//头像框
}

message RankInfo
{
	uint64 Score = 1; // 排序数值
	string PlayerID = 2;
	string PlayerName = 3;
	string PlayerHeadIcon = 4;
	uint32 HeadIconFrame = 5;//头像框
	string PlayerTitle = 6;
	uint32 PlayerLv = 7;
	uint32 MainPlayerCfgID = 8;
	uint32 MainPlayerSkinCfgID = 9;//主角皮肤配置ID
	cliAllEnum.FactionType FactionType = 10;//阵营信息
	string GuildName = 11;
	uint32 GuildIcon = 12; // 公会头像ID
	uint64 FightingNum = 13;
}

message C2G_GetRankListReq
{
    cliAllEnum.RankType type = 1;
    uint32 page = 2;
    uint32 limit = 3;
}
message G2C_GetRankListRes
{
	errorNo.ErrorNo Err = 1;
	cliAllEnum.RankType type = 2;
	uint32 page = 3;
    uint32 total_count = 4;
	uint32 myrank = 5;
	RankInfo myinfo = 6; //
	repeated GuildRankItem guildrank=7;
	repeated RankInfo rankinfo =8;
	repeated ArenaRankInfoView arenarank =9;// 竞技场
	repeated ArenaRankInfoView ringrank =10;//擂台

	repeated ArenaRankInfoView worldmatchrank =12;//匹配赛
}

// 远征关卡
message ExpeditionLevelInfo
{
	uint32 Level = 1; // 关卡
	BattlePlayerInfo BattlePlayerInfo = 2;
	ArenaRankInfoView ArenaRankInfoView = 3;
}

// 远征
message ExpeditionInfo
{
	repeated ExpeditionLevelInfo LevelList = 1; // 关卡列表
	uint32 MaxLevel = 2; // 最大关卡数
	uint32 ResetTime = 3; // 重置时间
	map<uint32,uint32> AwardLevelList = 4; // 已领取奖励关卡
	BattlePlayerInfo BattlePlayerInfo = 5;
	map<uint32,uint32> ElfSelected = 6; // 三消已选择列表小精灵
	map<uint32,uint32> ElfPosList = 7; // 三消激活位置
	ArenaRankInfoView ArenaRankInfoView = 8;
}

// 远征战斗信息
message ExpeditionBattleInfo
{
	uint32 StartTime = 1; // 开始时间
	uint32 ServerLevelID = 2; // 结束关卡
	uint32 Count = 3; // 战斗次数
	map<uint32, ExpeditionLevelBattleInfo> LevelList = 4; // KEY:关卡ID
	uint32 TotalTime = 5; // 战斗总时长
	cliAllEnum.ExpeditionState State = 6; // 状态
}

message ExpeditionLevelBattleInfo
{
	uint32 BattleTime = 1; // 战斗时长
	map<uint32,BattleHeroInfo> HeroInfo = 2; //key:布阵的站位
	uint32 RandomSeed = 3;
	repeated ItemReq ItemList = 4;//奖励
	uint32 RoundID = 5;
}

message SysExpedtionInfo
{
	uint32 SanXiaoLevelID = 1;
	uint32 SanXiaoRefreshTime = 2; // 三消刷新时间
	repeated uint32 ElfRange = 3;//三消小精灵范围
}

message C2G_GetExpeditionReq
{
}
message G2C_GetExpeditionRes
{
	errorNo.ErrorNo Err = 1;
	ExpeditionInfo ExpeditionInfo = 2;
	ExpeditionBattleInfo BattleInfo = 3;
	SysExpedtionInfo SysExpedtionInfo = 4;
}

message G2C_SyncExpeditionRes
{
	errorNo.ErrorNo Err = 1;
	ExpeditionInfo ExpeditionInfo = 2;
	ExpeditionBattleInfo BattleInfo = 3;
	SysExpedtionInfo SysExpedtionInfo = 4;
}

// 远征 - 获取某个关卡信息
message C2G_GetExpeditionLevelReq
{
	uint32 Level = 1; // 关卡
}
message G2C_GetExpeditionLevelRes
{
	errorNo.ErrorNo Err = 1;
	ExpeditionLevelInfo ExpeditionLevelInfo = 2;
}

message C2G_ExpeditionGetRewardReq{
	uint32 Level = 1; // 关卡
}

message G2C_ExpeditionGetRewardRes{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;//奖励
	map<uint32,uint32> AwardLevelList = 3; // 已领取奖励关卡
}

message C2G_ExpeditionClientStateReq{
	uint32 State = 1; // 1:不在场景中 2:进入场景中 3:远游结束
}

message G2C_ExpeditionClientStateRes{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;//奖励
	uint32 State = 3;
}

message C2G_ExpeditionSaveElfListReq{
	map<uint32,uint32> ElfSelected = 1;
}

message G2C_ExpeditionSaveElfListRes{
	errorNo.ErrorNo Err = 1;
	map<uint32,uint32> ElfSelected = 2;
}

message C2G_ExpeditionCreateBattleReq{
	uint32 Count = 1;
}

message G2C_ExpeditionCreateBattleRes{
	errorNo.ErrorNo Err = 1;
}

message C2G_ExpeditionGetPlayerInfoReq{
}

message G2C_ExpeditionGetPlayerInfoRes{
	errorNo.ErrorNo Err = 1;
	ArenaRankInfoView ArenaRankInfoView = 2;
}

// 试炼
message TrialFormationHeroInfo
{
	repeated BattleHeroInfo HeroList = 1;
}

message TrialHeroList
{
	repeated uint32 HeroList = 1;
}

// 试炼 - 玩家信息
message PlayerTrialInfo
{
	map<uint32, TrialHeroList> HeroFormation = 1;
	uint32 StartLevel = 2; // 起始关卡
	uint32 MaxLevel = 3; // 历史已通最大关数
	repeated uint32 DayAwardLevel = 4; // 每日已领奖关卡
	uint32 SubstituteCount = 5; // 替补次数
	uint32 ResetTime = 6; // 重置时间
	uint32 DateTime = 7; // 每日刷新时间
	uint32 DayBattleCount = 8; // 每日战斗次数
	uint32 AutoResetStartLevel = 9; // 自动重置开始关卡
	uint32 DayMaxLevel = 10; // 每日已通最大关数
}

message PlayerTrialBattleInfo
{
	uint32 StartLevel = 1; // 起始关卡
	uint32 ServerLevelID = 2; // 服务端通关关卡
	uint32 ReportLevelID = 3; // 客户端关卡
	uint32 ReportTime = 4; // 客户端关卡汇报时间
	uint32 CreateTime = 5; // 战斗开始时间
	uint32 OfflineTime = 6; // 战斗挂机时间
	map<uint32, TrialBattleLevelInfo> LevelInfo = 7; // KEY:关卡ID 每关死亡英雄列表
	cliAllEnum.TrialState State = 8; // 状态
	PlayerTrialRecord TrialRecord = 9; // 
	uint32 MaxLevelID = 10; // 当前战斗最大关数
}

message PlayerTrialRecord
{
	uint32 LevelID = 1;
	string RoomID = 2;
	repeated BattlePlayerInfo BattlePlayerList = 3;
	uint32 RandomSeed = 4;
	cliAllEnum.PVEType PVEType = 5;
	BattleTrialInfo TrialInfo = 6;
	string CliVer = 7;//客户端版本号
}

message BattleTrialInfo
{
	map<uint32, TrialFormationHeroInfo> Formation = 1; // 无尽试炼阵型 KEY:阵位
	SysTrialInfo SysTrialInfo = 2;  // 无尽试炼系统信息
	uint32 SubstituteCount = 3; // 无尽试炼替补次数
}

message TrialBattleLevelInfo
{
	map<uint32, uint32> DeadHero = 1; // KEY:阵位索引 VALUE:位置
	uint32 SubstituteCount = 2; // 无尽试炼替补次数
	uint32 BattleTime = 3; // 战斗时长
}

// 试炼 - 全服数据
message SysTrialInfo
{
	uint32 LevelID = 1; // 三消关卡,每日随机
	uint32 BuffID = 2; // buff
	repeated uint32 HeroList = 3; // 获得BUFF的幻灵
	uint32 DateTime = 4; // 每日刷新时间
}

// 试炼 - 获取试炼信息
message C2G_GetTrialInfoReq
{
}
message G2C_GetTrialInfoRes
{
	SysTrialInfo SysTrialInfo = 1;
	PlayerTrialInfo TrialInfo = 2;
	PlayerTrialBattleInfo BattleInfo = 3;
	errorNo.ErrorNo Err = 4;
}

message C2G_TrialGetBattleInfoReq
{
}
message G2C_TrialGetBattleInfoRes
{
	PlayerTrialBattleInfo BattleInfo = 1;
	errorNo.ErrorNo Err = 2;
}

// 试炼 - 重置
message C2G_TrialResetReq
{
}
message G2C_TrialResetRes
{
	PlayerTrialInfo TrialInfo = 1;
	PlayerTrialBattleInfo BattleInfo = 2;
	SysTrialInfo SysTrialInfo = 3;
	errorNo.ErrorNo Err = 4;
}

// 试炼 - 观战
message C2G_TrialViewBattleReq
{
	uint32 Type = 1; // 1:观战 2:退出观战
}
message G2C_TrialViewBattleRes
{
	errorNo.ErrorNo Err = 1;
}

// 试炼 - 领取奖励
message C2G_TrialTakeAwardReq
{
	uint32 LevelID = 1;  // 需要领奖的最新关卡
}
message G2C_TrialTakeAwardRes
{
	repeated uint32 DayAwardLevel = 1; // 每日已领奖关卡
	repeated ItemReq ItemList = 2; // 奖励
	errorNo.ErrorNo Err = 3;
}

// 试炼 - 保存阵型
message C2G_TrialFormationSaveReq
{
	map<uint32, TrialHeroList> HeroFormation = 1;
}
message G2C_TrialFormationSaveRes
{
	errorNo.ErrorNo Err = 1;
}

// 试炼 - 一键上阵
message C2G_TrialFormationUpReq
{
}
message G2C_TrialFormationUpRes
{
	map<uint32, TrialHeroList> HeroFormation = 1;
	errorNo.ErrorNo Err = 2;
}

// 试炼 - 一键下阵
message C2G_TrialFormationDownReq
{
}
message G2C_TrialFormationDownRes
{
	errorNo.ErrorNo Err = 1;
}

// 试炼 - 改变英雄队列位置
message C2G_TrialChangePosReq
{
	uint32 HeroCfgID = 1;
	uint32 Index = 2; // 阵型索引
	uint32 Pos = 3; // 目标位置
}
message G2C_TrialChangePosRes
{
	uint32 Index = 1; // 阵型索引
	TrialHeroList Formation = 2;
	errorNo.ErrorNo Err = 3;
}

// 家园 - 建筑
message HomeBuilding
{
	uint32 BuildingCfgID = 1;//配置表ID
	uint32 Level = 2;
	uint32 SkinID = 3;
}

// 家园 - 装饰
message HomeOrnament
{
	uint32 BuildingCfgID = 1;//配置表ID
	uint32 Num = 2; // 包裹内数量
	uint32 TotalNum = 3; // 总数量
}

message HomeOrnamentPlace
{
	uint32 ID = 1;
	uint32 BuildingCfgID = 2; //配置表ID
	uint32 RegionID = 3; // 区域ID
	string Attr = 4;
}

message HomeHeroDiaryAction
{
	map<string, uint32> ActionList = 1; // 行为日志
}

message HomeHeroDiary
{
	map<string, HomeHeroDiaryAction> DiaryList = 1; // KEY为日期
	string YesterdayDiary = 2;
}

message HomeHero
{
	uint32 ID = 1;
	string PlayerID = 2;
	string PlayerName = 3;
	uint32 HeroCfgID = 4;
	cliAllEnum.HomeHeroState State = 5; // 状态
}

message HomeHeroStory
{
	uint32 ID = 1;
	uint32 StoryID = 2;
	uint32 RefreshTime = 3;
	uint32 HeroCfgID = 4;
}

// 家园拜访者
message HomeCourtyardVisitor
{
	string PlayerID = 1;
	string PlayerName = 2;
	string PlayerHeadIcon = 3;//玩家头像
	uint32 PlayerVipLv = 4;
	uint32 PlayerLevel = 5;
	uint32 StartTime = 6;
	uint32 EndTime = 7;
	uint32 HeadIconFrame = 8;//头像框
}

message HomeCourtyard
{
	map<uint32, HomeOrnament> OrnamentList = 12; // 装饰包裹
	map<uint32, HomeOrnamentPlace> OrnamentPlaceList = 13; // 装饰放置列表
	map<string, HomeCourtyardVisitor> VisitorList = 14; // 拜访者列表
	uint32 FanRongDu = 15; // 繁荣度
	uint32 FanRongDuLv = 16; // 繁荣度等级
	uint32 ByVisitCount = 17; // 被拜访次数
	uint32 ByVisitCountResetTime = 18; // 被拜访次数重置时间
}

message HomeHotelRoom
{
	uint32 ShuShiDu = 1; // 舒适度
	uint32 ShuShiDuLv = 2; // 舒适度等级
	repeated uint32 HeroList = 3; // 英雄列表
	uint32 PlaceHeroCount = 4; // 英雄数量
}

// 家园旅馆
message HomeHotel
{
	map<uint32, HomeHotelRoom> RoomList = 1; // 种族房间
	uint32 QuestGroupID = 2; // 当前任务组
	map<uint32,uint32> QuestList = 3; // 当前完成任务
	uint32 ShuShiDu = 4; // 舒适度
	uint32 ShuShiDuLv = 5; // 舒适度等级
}

// 家园奇遇
message HomeAdventure
{
	uint32 AdventureCfgID = 1; // 奇遇配置ID
	string PlayerID = 2;
	string PlayerName = 3;
	string PlayerHeadIcon = 4;//玩家头像
	uint32 HeroCfgID = 5;
	uint32 HeadIconFrame = 6;//头像框
}

// 家园日志
message HomeLogMsg
{
	string Msg = 1;
	uint32 CreateTime = 2; 
}
message HomeLog
{
	repeated HomeLogMsg LogList = 1;
	uint32 Count = 2;
}

// 家园农场
message HomeFarmHero
{
	string PlayerID = 1;
	uint32 HeroCfgID = 2;
	uint32 StartTime = 3;
	uint32 EndTime = 4;
	uint32 SkinCfgID = 5;//皮肤配置ID
	HomeOwnerPlayerInfo PlayerInfo = 6;
}

message HomeCrops
{
	uint32 Time = 1; // 解锁时间
	bool IsActivate = 2; // 是否已激活
}

message HomeFarm
{
	map<uint32, HomeFarmHero> HeroList = 1; // 英雄列表 key: 槽位pos
	map<uint32, HomeFarmHero> FromFriendHeroList = 2; // 好友英雄列表 key: 槽位pos
	map<uint32, HomeFarmHero> ToFriendHeroList = 3; // 好友英雄列表 key: HeroCfgID
	uint32 HeroCount = 4;
	uint32 FromFriendHeroCount = 5;
	map<uint32, HomeCrops> CropsList = 6; // 农作物图鉴列表 K: ItemCfgID V:HomeCrops
	map<string, uint32> InviteList = 7; // 种田邀请列表 K: PlayerID V:Datetime
	repeated ItemReq FromFriendAward = 8; // 好友给主人种田，主人获得的奖励
	repeated ItemReq ToFriendAward = 9; // 给好友种田获得的奖励
}

// 家园 - 家宴基础信息
message HomePartyBasicInfo
{
	string PartyID = 1;
	string PlayerID = 2;
	uint32 CreateTime = 3;
	uint32 SubscribeStartTime = 4; // 开启开始时间
	uint32 SubscribeEndTime = 5; // 开启结束时间 
	uint32 StartTime = 6; // 开始时间
	uint32 EndTime = 7; // 结束时间
	repeated string MainGuestList = 8; // 主陪
	repeated string GuestList = 9; // 宾客
	uint32 SetmealCfgID = 10; // 套餐配置ID
	cliAllEnum.HomePartyState State = 11; // 状态
	ItemReq Atmosphere = 12; // 气氛值
	cliAllEnum.HomePartyType PartyType = 13;
}

message HomePartyPlayerData
{
	ItemReq Atmosphere = 1; // 气氛值
	map<uint32,uint32> DishList = 2; // 吃菜记录
	uint32 WineCfgID = 3; // 酿酒结果
	uint32 WineCount = 4;
	cliAllEnum.HomePartyPlayerType PlayerType = 5; // 玩家类型
	map<uint32,uint32> AwardList = 6; // 个人气氛值奖励领取记录 k: 气氛奖励配置ID v: DateTime 领取时间
	uint32 AtmosphereTime = 7; // 气氛值获得时间
	map<uint32,uint32> WineList = 8; // 酿酒记录 k: WineCfgID v: DateTime 时间
}

message HomePartyPlayerView
{
	uint32 SceneState = 1; // 1:离开 2:进入
	map<string,uint32> DanceInviteList = 2; // 共舞邀请列表 k: PlayerID v: DateTime邀请时间
	map<string,uint32> DanceBeInvitedList = 3; // 共舞被邀请列表k: PlayerID v: DateTime邀请时间
	HomePartyPlayerAction Action = 4;

	string PlayerName = 5;
	string PlayerHeadIcon = 6;
	uint32 PlayerLevel = 7;
	uint32 MainPlayerCfgID = 8;
	string GuildName = 9; // 公会名称
	uint32 Fighting = 10; // 战斗力
	uint32 MainPlayerSkinCfgID = 11;//主角皮肤配置ID
	uint32 HeadIconFrame = 12;//头像框
}

message HomePartyPlayerDisplay
{
	ItemReq Atmosphere = 1; // 气氛值
	map<uint32,uint32> DishList = 2; // 吃菜记录
	uint32 WineCfgID = 3; // 酿酒结果
	uint32 WineCount = 4; // 酿酒次数
	cliAllEnum.HomePartyPlayerType PlayerType = 5; // 玩家类型
	map<uint32,uint32> AwardList = 6; // 个人气氛值奖励领取记录 k: 气氛奖励配置ID v: DateTime 领取时间
	uint32 AtmosphereTime = 7; // 气氛值获得时间
	map<uint32,uint32> WineList = 8; // 酿酒记录 k: WineCfgID v: DateTime 时间

	uint32 SceneState = 10; // 0:受邀请未进入 1:离开场景挂机 2:已进入场景
	map<string,uint32> DanceInviteList = 11; // 共舞邀请列表 k: PlayerID v: DateTime邀请时间
	map<string,uint32> DanceBeInvitedList = 12; // 共舞被邀请列表k: PlayerID v: DateTime邀请时间
	HomePartyPlayerAction Action = 13;
	string PlayerName = 14;
	string PlayerHeadIcon = 15;
	uint32 PlayerLevel = 16;
	uint32 MainPlayerCfgID = 17;
	string GuildName = 18; // 公会名称
	uint32 Fighting = 19; // 战斗力
	uint32 MainPlayerSkinCfgID = 20;//主角皮肤配置ID
	uint32 HeadIconFrame = 21;//头像框
}

message HomePartyPlayerAction
{
	cliAllEnum.HomePartyActionType ActionType = 1; // 行为类型
	double axis_x = 2;
	double axis_y = 3;
	double pos_x = 4;
	double pos_y = 5;
	repeated string PlayerList = 6; // 参与玩家
	uint32 StartTime = 7; // 开始时间
	uint32 EndTime = 8; // 结束时间
}

// 家宴 - 糖
message HomePartySugar
{
	string PlayerID = 1;
	uint32 SugarCfgID = 2;
}

message HomePartyGame
{
	cliAllEnum.HomePartyGameType GameType = 1; // 当前游戏类型
	uint32 GameID = 2; // 当前游戏类型
	uint32 StartTime = 3;
	uint32 EndTime = 4;
	HomePartyGameEat GameEat = 5;
	HomePartyGameWine GameWine = 6;
	map<uint32,HomePartyRobberInfo> RobberList = 7; 
	HomePartyGameGuessNumber GameGuessNumber = 8;
	HomePartyAtmosphereAward AtmosphereAward = 9;
}

message HomePartyWineMaterial
{
	uint32 MaterialCfgID = 1;
	bool IsSenior = 2; // 是否高级材料
}

// 家宴吃菜
message HomePartyGameEat
{
	uint32 DishIndex = 1; // 当前第几道上菜
	uint32 DishID = 2;
}

// 家宴酿酒
message HomePartyGameWine
{
	repeated HomePartyWineMaterial MaterialList = 1;
}

message HomePartyGameGuessNumberAnswer
{
	uint32 Count = 3; // 回答次数
	uint32 MinNum = 4;
	uint32 MaxNum = 5;
	uint32 StartTime = 6;
	uint32 EndTime = 7;
	map<string, uint32> AnswerList = 8; // 玩家回答列表 K: PlayerID V: Number
}

message HomePartyGameGuessNumber
{
	uint32 QuestionCount = 1; // 当前第几轮答题
	uint32 Number = 2;
	uint32 StartTime = 3;
	uint32 EndTime = 4;
	cliAllEnum.HomePartyGameGuessNumberState State = 5;
	HomePartyGameGuessNumberAnswer Answer = 6;
	map<string, bool> JoinList = 7; // 玩家参与列表 K: PlayerID V: true
}

message HomePartyAtmosphereAward
{
	uint32 AwardCfgID = 1; // 奖励ID
	map<string, uint32> PlayerList = 3; // 领取记录 K: PlayerID V:DateTime
}

// 家宴信息
message HomePartyInfo
{
	HomePartyBasicInfo BasicInfo = 1;
	HomePartyGame Game = 2; // 当前游戏
	map<string, HomePartyPlayerDisplay> PlayerList = 3; // K: PlayerID
	map<string, uint32> GiftList = 4; // 礼物列表 K: PlayerID V: GiftCfgID
	map<string, HomePartySugar> SugarList = 5; // 糖列表
}

message HomePartyPlayerInfo
{
	map<string,uint32> CreateList = 1; // 举办列表 K: PartyID V: DateTime
	repeated string JoinList = 2; // 参与列表 V: PartyID
	uint32 CurFirework = 3; // 当前选择的烟花 item_id
}

message HomePartyListItem
{
	string PartyID = 1;
	string PlayerID = 2;
	string PlayerName = 3;
	string PlayerHeadIcon = 4;
	uint32 PlayerLevel = 5;
	uint32 CreateTime = 6;
	uint32 SubscribeStartTime = 7; // 开启开始时间
	uint32 SubscribeEndTime = 8; // 开启结束时间 
	uint32 StartTime = 9; // 开始时间
	uint32 EndTime = 10; // 结束时间
	repeated string MainGuestList = 11; // 主陪
	repeated string GuestList = 12; // 宾客
	uint32 SetmealCfgID = 13; // 套餐配置ID
	cliAllEnum.HomePartyState State = 14; // 状态
	uint32 JoinCount = 15; // 参与人数
	cliAllEnum.HomePartyGameType GameType = 16; // 当前游戏类型
	cliAllEnum.HomePartyType PartyType = 17;
	uint32 HeadIconFrame = 18;//头像框
}

message PlayerHomeInfo
{
	repeated uint32 RegionIDList = 1; // 解锁区域ID
	map<uint32, HomeHero> HeroList = 2; // 英雄列表 key: HeroCfgID
	map<uint32, HomeHero> FriendHeroList = 3; // 好友英雄列表 key: 动态ID
	uint32 HeroPlaceCount = 4; // 英雄数量
	HomeHeroStory HeroStory = 5; // 英雄剧情
	repeated HomeHeroStory FriendHeroStory = 6; // 好友英雄剧情
	uint32 StoryDayCount = 7; // 英雄剧情每天次数
	uint32 StoryDayCountTime = 8; // 英雄剧情次数刷新时间
	uint32 FriendStoryRefreshTime = 9; // 好友英雄剧情刷新时间
	repeated uint32 SkinList = 10; // 皮肤列表
	uint32 SkinID = 11; // 场景皮肤
	HomeCourtyard Courtyard = 12; // 庭院
	HomeHotel Hotel = 13; // 旅馆
	HomeAdventure Adventure = 14; // 奇遇
	HomeLog HomeLog = 15; // 日志消息
	HomeFarm Farm = 16; // 农场
	repeated string PlayerList = 17; // 拜访列表
	HomePartyPlayerInfo HomeParty = 18; // 家宴信息
	string PlayerID = 19;
	uint32 MaxID = 50;
}

// 家园 - 获取信息
message C2G_HomeGetInfoReq
{
}
message G2C_HomeGetInfoRes
{
	PlayerHomeInfo HomeInfo = 1;
	errorNo.ErrorNo Err = 2;
}

message G2C_SyncHomeInfoRes
{
	errorNo.ErrorNo Err = 1;
	PlayerHomeInfo HomeInfo = 2;
	repeated string UpdateFlags = 3;
}

// 家园 - 区域解锁
message C2G_HomeRegionUnlockReq
{
	uint32 RegionID = 1;
}
message G2C_HomeRegionUnlockRes
{
	repeated uint32 RegionIDList = 1; // 解锁区域ID
	uint32 MaxHeroPlaceCount = 2; // 可放置英雄数量上限
	errorNo.ErrorNo Err = 3;
}

// 家园 - 事项任务完成
message C2G_HomeQuestFinishReq
{
	uint32 QuestCfgID = 1;
}

message G2C_HomeQuestFinishRes
{
	uint32 QuestCfgID = 1;
	errorNo.ErrorNo Err = 2;
}

// 家园 - 旅馆事项任务完成
message C2G_HomeHotelQuestFinishReq
{
	uint32 QuestCfgID = 1;
}

message G2C_HomeHotelQuestFinishRes
{
	uint32 QuestCfgID = 1;
	errorNo.ErrorNo Err = 2;
}

// 家园 - 建筑升级
message C2G_HomeBuildingUpReq
{
	uint32 BuildingCfgID = 1;
}
message G2C_HomeBuildingUpRes
{
	HomeBuilding BuildingInfo = 1;
	uint32 MaxHeroPlaceCount = 2; // 可放置英雄最大数量
	errorNo.ErrorNo Err = 3;
}

message C2G_HomeBuildingSaveReq
{
	map<uint32, HomeOrnamentPlace> AddList = 1; // 新增装饰
	repeated uint32 RemoveList = 2; // 删除装饰
}
message G2C_HomeBuildingSaveRes
{
	errorNo.ErrorNo Err = 1;
}

// 家园 - 装饰放置
message C2G_HomeOrnamentPlaceReq
{
	uint32 ID = 1; // 唯一ID
	uint32 BuildingCfgID = 2; // 装饰配置ID
	string Attr = 3;
}
message G2C_HomeOrnamentPlaceRes
{
	HomeOrnament Ornament = 1;
	HomeOrnamentPlace OrnamentPlace = 2;
	uint32 FanRongDu = 3;
	errorNo.ErrorNo Err = 4;
}

// 家园 - 装饰取消放置
message C2G_HomeOrnamentPlaceRemoveReq
{
	uint32 ID = 1; // 唯一ID
}
message G2C_HomeOrnamentPlaceRemoveRes
{
	HomeOrnament Ornament = 1;
	HomeOrnamentPlace OrnamentPlace = 2; // 需要删除的装饰
	uint32 FanRongDu = 3; // 繁荣度
	errorNo.ErrorNo Err = 4;
}

// 家园 - 英雄放置
message C2G_HomeHeroPlaceReq
{
	uint32 HeroCfgID = 1;
}
message G2C_HomeHeroPlaceRes
{
	errorNo.ErrorNo Err = 1;
	HomeHero HeroInfo = 2;
}

// 家园 - 英雄取消放置
message C2G_HomeHeroPlaceRemoveReq
{
	uint32 HeroCfgID = 1;
}
message G2C_HomeHeroPlaceRemoveRes
{
	errorNo.ErrorNo Err = 1;
	HomeHero HeroInfo = 2;
}

// 家园 - 英雄信息获取
message C2G_HomeHeroInfoReq
{
	uint32 HeroCfgID = 1;
}
message G2C_HomeHeroInfoRes
{
	HomeHero HeroInfo = 1;
	errorNo.ErrorNo Err = 2;
}

// 家园 - 剧情结束
message C2G_HomeHeroStoryFinishReq
{
	uint32 ID = 1;
	uint32 StoryID = 2;
}
message G2C_HomeHeroStoryFinishRes
{
	repeated ItemReq ItemList = 1; // 奖励
	errorNo.ErrorNo Err = 2;
}

// 家园 - 旅馆 - 英雄放置
message C2G_HomeHotelHeroPlaceReq
{
	uint32 HeroCfgID = 1;
	uint32 RoomID = 2;
}
message G2C_HomeHotelHeroPlaceRes
{
	errorNo.ErrorNo Err = 1;
	uint32 HeroCfgID = 2;
	uint32 RoomID = 3;
}

// 家园 - 旅馆 - 英雄取消放置
message C2G_HomeHotelHeroPlaceRemoveReq
{
	uint32 HeroCfgID = 1;
	uint32 RoomID = 2;
}
message G2C_HomeHotelHeroPlaceRemoveRes
{
	errorNo.ErrorNo Err = 1;
	uint32 HeroCfgID = 2;
	uint32 RoomID = 3;
}

// 家园 - 庭院 - 获取信息
message C2G_HomeCourtyardGetInfoReq
{
}
message G2C_HomeCourtyardGetInfoRes
{
	HomeCourtyard Courtyard = 1;
	errorNo.ErrorNo Err = 2;
}

// 家园 - 庭院 - 拜访
message C2G_HomeVisitCourtyardReq
{
	string PlayerID = 1;
}
message G2C_HomeVisitCourtyardRes
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	map<uint32, HomeOrnamentPlace> OrnamentPlaceList = 3; // 装饰列表
	map<string, HomeCourtyardVisitor> VisitorList = 4; // 拜访者列表
}

message HomeOwnerPlayerInfo
{
	string PlayerName = 1;
	uint32 PlayerLv = 2;
	string PlayerHeadIcon = 3;
	uint32 MainPlayerCfgID = 4 ;//主角ID
	uint32 MainPlayerSkinCfgID = 5;//主角皮肤配置ID
	uint32 HeadIconFrame = 6;//头像框
}

// 家园 - 访问家园
message C2G_HomeVistorJoinReq
{
	string PlayerID = 1;
	uint32 From = 2;
}
message G2C_HomeVistorJoinRes
{
	errorNo.ErrorNo Err = 1;
	PlayerHomeInfo HomeInfo = 2;
	HomeOwnerPlayerInfo PlayerInfo = 3;
	uint32 From = 4;
}

// 家园 - 进入退出家园场景
message C2G_HomeVistorSceneStateReq
{
	string PlayerID = 1; // 目标家园PlayerID
	bool State = 2; // true: 进入 false: 退出
}
message G2C_HomeVistorSceneStateRes
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	bool State = 3;
}

// 家园 - 家园信息同步访问者
message G2C_HomeVistorUpdateHomeInfoRes
{
	errorNo.ErrorNo Err = 1;
	PlayerHomeInfo HomeInfo = 2;
	repeated string UpdateFlags = 3;
}

// 家园 - 农场 - 获取信息
message C2G_HomeFarmGetInfoReq
{
}
message G2C_HomeFarmGetInfoRes
{
	errorNo.ErrorNo Err = 1;
	HomeFarm Farm = 2;
}

message C2G_HomeFarmPlaceHeroReq
{
	map<uint32, uint32> HeroList = 1; // K: Pos V: HeroCfgID
}
message G2C_HomeFarmPlaceHeroRes
{
	errorNo.ErrorNo Err = 1;
	map<uint32, uint32> HeroList = 2; // K: Pos V: HeroCfgID
}

message C2G_HomeFarmCancelPlaceHeroReq
{
	uint32 Pos = 1;
}
message G2C_HomeFarmCancelPlaceHeroRes
{
	errorNo.ErrorNo Err = 1;
	uint32 Pos = 2;
}

message C2G_HomeFarmPlaceFriendHeroReq
{
	string PlayerID = 1;
	uint32 HeroCfgID = 2;
	uint32 Pos = 3;
}
message G2C_HomeFarmPlaceFriendHeroRes
{
	errorNo.ErrorNo Err = 1;
	uint32 HeroCfgID = 2;
}

// 家园农场 - 获取奖励
message C2G_HomeFarmTakeAwardReq
{
	uint32 Pos = 1;
}
message G2C_HomeFarmTakeAwardRes
{
	errorNo.ErrorNo Err = 1;
	uint32 Pos = 2;
	repeated ItemReq ItemList = 3; // 奖励
	map<uint32, uint32> CropsList = 4; // 新增农作物图鉴列表 K: ItemCfgID V:Datetime
}

// 家园农场 - 好友种田获取奖励
message C2G_HomeFarmFriendTakeAwardReq
{
}
message G2C_HomeFarmFriendTakeAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq FromFriendAward = 2; // 好友种田农作物产出
	repeated ItemReq ToFriendAward = 3; // 去好友家园种田获得奖励
	map<uint32, uint32> CropsList = 4; // 新增农作物图鉴列表 K: ItemCfgID V:Datetime
}

// 家园农场 - 获取好友种田数量
message HomeFarmFriendInfo
{
	uint32 Count = 1;
	uint32 LevelID = 2;
}

message C2G_HomeFarmFriendWorkCountReq
{
	uint32 Type = 1; // 1: 好友列表 2:公会列表
}
message G2C_HomeFarmFriendWorkCountRes
{
	errorNo.ErrorNo Err = 1;
	uint32 Type = 2; // 1: 好友列表 2:公会列表
	map<string, HomeFarmFriendInfo> PlayerList = 3; // K：PlayerID V: HomeFarmFriendInfo
}

// 家园农场 - 邀请种田
message C2G_HomeFarmInviteReq
{
	repeated string PlayerList = 1;
}
message G2C_HomeFarmInviteRes
{
	errorNo.ErrorNo Err = 1;
	repeated string PlayerList = 2;
}

// 家园农场 - 农作物激活
message C2G_HomeFarmActivateCropsReq
{
	uint32 CropsCfgID = 1; // 激活的农作物列表 CropsCfgID
}
message G2C_HomeFarmActivateCropsRes
{
	errorNo.ErrorNo Err = 1;
	uint32 CropsCfgID = 2;
	repeated ItemReq ItemList = 3;
}

// 家园 - 奇遇
message C2G_HomeAdventureGetReq
{
}
message G2C_HomeAdventureGetRes
{
	errorNo.ErrorNo Err = 1;
	HomeAdventure HomeAdventure = 2;
}

message C2G_HomeAdventureFinishReq
{
	uint32 AdventureNodeID = 1;
}
message G2C_HomeAdventureFinishRes
{
	errorNo.ErrorNo Err = 1;
	HomeAdventure HomeAdventure = 2;
}

// 家园 = 日志消息
message C2G_HomeLogGetReq
{
}
message G2C_HomeLogGetRes
{
	errorNo.ErrorNo Err = 1;
	HomeLog HomeLog = 2;
}

message C2G_HomePartyGetListReq
{
}
message G2C_HomePartyGetListRes
{
	errorNo.ErrorNo Err = 1;
	map<string,HomePartyListItem> PartyList = 2;
}

// 同步列表某一项信息
message G2C_SyncHomePartyItemRes
{
	errorNo.ErrorNo Err = 1;
	HomePartyListItem PartyItem = 2;
}

// 同步家宴详细信息
message G2C_SyncHomePartyInfoRes
{
	errorNo.ErrorNo Err = 1;
	HomePartyInfo HomePartyInfo = 2;
}

// 增量更新家宴详细信息
message G2C_UpdateHomePartyInfoRes
{
	errorNo.ErrorNo Err = 1;
	HomePartyInfo HomePartyInfo = 2;
}

// 家宴重新进入
message C2G_HomePartyRejoinReq
{
	string PartyID = 1; // 必须项
}
message G2C_HomePartyRejoinRes
{
	errorNo.ErrorNo Err = 1;
	HomePartyInfo HomePartyInfo = 2;
}

// 同步家宴玩家进入
message G2C_SyncHomePartyPlayerJoin
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	HomePartyPlayerDisplay PlayerDisplay = 3;
}

message G2C_SyncHomePartyGame
{
	errorNo.ErrorNo Err = 1;
	cliAllEnum.HomePartyGameType GameType = 2; // 当前游戏类型
}

// 家宴预约
message C2G_HomePartySubscribeReq
{
	uint32 DateTime = 1; // 日期
	uint32 PartyTimeCfgID = 2; // 时间配置ID
	repeated string MainGuestList = 3; // 主陪
	repeated string GuestList = 4; // 宾客
	uint32 SetmealCfgID = 5; // 套餐配置ID
}
message G2C_HomePartySubscribeRes
{
	errorNo.ErrorNo Err = 1;
	HomePartyListItem PartyItem = 2;
}

// 开启宴会
message C2G_HomePartyOpenReq
{
	string PartyID = 1;
}
message G2C_HomePartyOpenRes
{
	errorNo.ErrorNo Err = 1;
	string PartyID = 2;
}

// 开启庆功宴宴会
message C2G_HomePartyCelebrationOpenReq
{
	repeated string MainGuestList = 1; // 主陪
	repeated string GuestList = 2; // 宾客
}
message G2C_HomePartyCelebrationOpenRes
{
	errorNo.ErrorNo Err = 1;
	string PartyID = 2;
}

// 家宴 - 加入
message C2G_HomePartyJoinReq
{
	string PartyID = 1; // 必须项
	uint32 GiftCfgID = 2;
}
message G2C_HomePartyJoinRes
{
	errorNo.ErrorNo Err = 1;
	string PartyID = 2;
}

// 家宴 - 场景状态
message C2G_HomePartySceneStateReq
{
	string PartyID = 1; // 必须项
	uint32 SceneState = 2; // 1:离开 2:进入
}
message G2C_HomePartySceneStateRes
{
	errorNo.ErrorNo Err = 1;
	string PartyID = 2; // 必须项
	uint32 SceneState = 3;
	string PlayerID = 4;
}

// 家宴 - 送礼
message C2G_HomePartyGiftReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	uint32 GiftCfgID = 2;
}
message G2C_HomePartyGiftRes
{
	errorNo.ErrorNo Err = 1;
}

message G2C_HomePartyShowGift
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	uint32 GiftCfgID = 3;
}

//家园玩家操作行为
message C2G_HomePartyPlayerAction
{
	string PlayerID = 1;
	cliAllEnum.HomePartyActionType ActionType = 2;
	double axis_x = 3;
	double axis_y = 4;
	double pos_x = 5;
	double pos_y = 6;
}
message G2C_HomePartyPlayerAction
{
	string PlayerID = 1;
	cliAllEnum.HomePartyActionType ActionType = 2;
	double axis_x = 3;  //朝向x
	double axis_y = 4;  //朝向y
	double pos_x = 5;
	double pos_y = 6;
	repeated string PlayerList = 7; // 参与玩家
	uint32 StartTime = 8; // 开始时间
	uint32 EndTime = 9; // 结束时间
}

// 家宴 - 移动
message C2G_HomePartyMoveReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	double axis_x = 2;  //朝向x
	double axis_y = 3;  //朝向y
	double pos_x = 4;
	double pos_y = 5;
}
message G2C_HomePartyMoveRes
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	double axis_x = 3;  //朝向x
	double axis_y = 4;  //朝向y
	double pos_x = 5;
	double pos_y = 6;
}

// 家宴 - 共舞邀请
message C2G_HomePartyDanceReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	string TargetPlayerID = 2;
}
message G2C_HomePartyDanceRes
{
	errorNo.ErrorNo Err = 1;
	string TargetPlayerID = 2;
}

// 家宴 - 共舞邀请回复
message C2G_HomePartyDanceReplayReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	string TargetPlayerID = 2; // 邀请人
	int32 Type = 3; // 1: 接受 2:拒绝
}
message G2C_HomePartyDanceReplayRes
{
	errorNo.ErrorNo Err = 1;
	string TargetPlayerID = 2; // 邀请人
	int32 Type = 3; // 1: 接受 2:拒绝
}

// 家宴 - 同步共舞被邀请通知
message G2C_SyncHomePartyDanceBeInvited
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2; // // 邀请人
}

// 家宴 - 同步共舞邀请回复通知
message G2C_SyncHomePartyDanceReplay
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2; // // 被邀请人
	int32 Type = 3; // 1: 接受 2:拒绝
}

// 家宴 - 撒糖
message C2G_HomePartyScatterSugarReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	uint32 Count = 2;
}
message G2C_HomePartyScatterSugarRes
{
	errorNo.ErrorNo Err = 1;
	map<string, HomePartySugar> SugarList = 2; // 糖列表
}

// 家宴 - 拾取糖
message C2G_HomePartyGetSugarReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	string SugarID = 2;
}
message G2C_HomePartyGetSugarRes
{
	errorNo.ErrorNo Err = 1;
	string SugarID = 2;
}

message G2C_HomePartyRemoveSugarRes
{
	errorNo.ErrorNo Err = 1;
	string SugarID = 2;
}

// 家宴 - 购买烟花
message C2G_HomePartyBuyFireworkReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	uint32 item_id = 2;
	uint32 item_num = 3;
}
message G2C_HomePartyBuyFireworkRes
{
	errorNo.ErrorNo Err = 1;
	ItemReq ItemReq = 2;
}

// 家宴 - 放置烟花
message C2G_HomePartyPlaceFireworkReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	uint32 item_id = 2;
}
message G2C_HomePartyPlaceFireworkRes
{
	errorNo.ErrorNo Err = 1;
	uint32 item_id = 2;
}

// 家宴 - 使用烟花
message C2G_HomePartyUseFireworkReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
}
message G2C_HomePartyUseFireworkRes
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	uint32 item_id = 3;
}

// 家宴 - 吃菜
message C2G_HomePartyEatDishReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
}
message G2C_HomePartyEatDishRes
{
	errorNo.ErrorNo Err = 1;
}
// 吃菜结束
message G2C_HomePartyEatDishFinishRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq AwardList = 2;
}

// 家宴 - 酿酒
message C2G_HomePartyMakeWineReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	repeated uint32 MaterialList = 2; // 材料列表
}
message G2C_HomePartyMakeWineRes
{
	errorNo.ErrorNo Err = 1;
	uint32 WineCfgID = 2;
	bool IsNew = 3;
}

message G2C_HomePartyMakeWineFinishRes
{
	errorNo.ErrorNo Err = 1;
	uint32 WineCfgID = 2;
	repeated ItemReq AwardList = 3;
}

// 家宴 - 猜数字准备
message G2C_HomePartyGuessNumberPrepareRes
{
	errorNo.ErrorNo Err = 1;
}

// 家宴 - 猜数字范围更新
message G2C_HomePartyGuessNumberUpdateRes
{
	errorNo.ErrorNo Err = 1;
	uint32 MinNum = 2;
	uint32 MaxNum = 3;
	uint32 StartTime = 4;
	uint32 EndtTime = 5;
}

// 家宴 - 猜数字答题奖励
message G2C_HomePartyGuessNumberAnswerAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq AwardList = 2;
	bool Win = 3;
	uint32 Number = 4; // 正确答案
}

// 家宴 - 猜数字答题结束
message G2C_HomePartyGuessNumberFinishRes
{
	errorNo.ErrorNo Err = 1;
}

// 家宴 - 猜数字
message C2G_HomePartyGuessNumberReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	uint32 Number = 2;
}
message G2C_HomePartyGuessNumberRes
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	uint32 Number = 3;
}

// 家宴 - 领取宝箱
message C2G_HomePartyGetAwardReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
}
message G2C_HomePartyGetAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq AwardList = 2;
}

// 家宴 - 个人气氛值奖励
message C2G_HomePartyPlayerAtmosphereAwardReq
{
	string PartyID = 1; // 可选， 默认当前进入的宴会
	uint32 AchieveCfgID = 2;
}
message G2C_HomePartyPlayerAtmosphereAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq AwardList = 2;
	uint32 AchieveCfgID = 3;
}

// 家宴人数
message C2G_HomePartyPlayerCountReq
{
}
message G2C_HomePartyPlayerCountRes
{
	errorNo.ErrorNo Err = 1;
	map<string, uint32> PartyList = 2; // K:PartyID V:Count
}

//好友系统找寻玩家信息 通过玩家名称
message C2G_FindFriendReq
{
	string PlayerNameOrID = 1;
}

message G2C_FindFriendRes
{
	repeated ApplyFriendInfo ApplyFriendInfoList = 1;
	errorNo.ErrorNo Err = 6;
}

message C2G_ApplyForFriendReq
{
	repeated string PlayerIDList = 1;
}

message G2C_ApplyForFriendRes
{
	errorNo.ErrorNo Err = 2;
}

message C2G_AgreeFriendReq
{
	string PlayerID = 1;
	bool IsAll = 2;
}

message G2C_AgreeFriendRes
{
	errorNo.ErrorNo Err = 1;
}

message C2G_DisagreeFriendReq
{
	string PlayerID = 1;
	bool IsAll = 2;
}

message G2C_DisagreeFriendRes
{
	errorNo.ErrorNo Err = 1;
}


message C2G_BlockFriendReq
{
	string PlayerID = 1;
}

message G2C_BlockFriendRes
{
	errorNo.ErrorNo Err = 1;
}

message C2G_RecommendFriendReq
{
}

message C2G_DeleteFriendReq
{
	string PlayerID = 1;
}

message G2C_DeleteFriendRes
{
	errorNo.ErrorNo Err = 1;
}

message G2C_RecommendFriendRes
{
	repeated ApplyFriendInfo  FriendList = 1;
	errorNo.ErrorNo Err = 2;
}
//玩家聊天消息请求
message C2G_ChatMsgReq
{
	cliAllEnum.ChannelType ChannelType=1;
	string PlayerID = 2; 
	string ChatMsg =3;
	string RecievePlayerID =4;//指定玩家聊天时需要携带
	cliAllEnum.ChatType ChatType=5;
	string Data = 6;//扩展信息
}

//玩家聊天消息请求恢复 成功或者失败
message G2C_ChatMsgRes
{
	errorNo.ErrorNo Err = 1;//被禁言或者字数超过限制会返回失败
}

//聊天消息通知 服务器转发或者发起 (玩家信息都是发送者的信息)
message G2C_ChatMsgNotice
{
	cliAllEnum.ChannelType ChannelType = 1;
	cliAllEnum.ChatType ChatType = 2;
	string ChatMsg = 3;
	string PlayerID = 4; //发送者PlayerID
	string PlayerName = 5;
	uint32 PlayerLv = 6;
	string PlayerHeadIcon = 7;
	uint32 HeadIconFrame = 8;//头像框
	uint32 MainPlayerCfgID = 10;//主角ID
	uint32 Time = 11;//消息的时间(秒)
	string ChatRoomID = 12;//房间号ID
	string Data = 13;//扩展信息
	bool IngnoreBrief=14; //不在缩略框中显示
	cliAllEnum.FactionType FactionType=15;//阵营信息
	uint32 PlayerTitle=16;//玩家称号
}


//离线通知
message G2C_OfflineNTfRes
{
	errorNo.ErrorNo Err = 1;
}

message C2G_GetHomeQuestProgressAward
{
}

message G2C_GetHomeQuestProgressAward
{
	repeated ItemReq AwardList = 1;
	errorNo.ErrorNo Err = 2;
}


message C2G_UseKTSkillTabReq
{
	uint32 HeroCfgID = 1;
	uint32 TabIndex = 2;
}

message G2C_UseKTSkillTabRes
{
	errorNo.ErrorNo Err = 2;
}


//升级、激活主角技能请求
message C2G_LvUpPlayerSkillReq
{
	uint32 SkillID=1;
}
message G2C_LvUpPlayerSkillRes
{
	errorNo.ErrorNo Err = 1;
}
//主角更新槽位技能请求
message C2G_UpdatePlayerSkillReq
{
	map<uint32,PlayerSkillInfo> SkillList=1;
}
message G2C_UpdatePlayerSkillRes
{
	errorNo.ErrorNo Err = 1;
}
//升级、激活主角技能秘籍
message C2G_LvUpPlayerSkillBookReq
{
	uint32 BookId =1;//秘籍ID 
}
message G2C_LvUpPlayerSkillBookRes
{
	errorNo.ErrorNo Err = 1;
}
//主角心法装备秘籍请求
message C2G_EquipBookReq
{
	uint32 BookId =1;//秘籍ID 
	uint32 PlayerSkillId=2; //心法ID
	uint32 Index =3;//装备位置
}
message G2C_EquipBookRes
{
	errorNo.ErrorNo Err = 1;
	uint32 BookId =2;//秘籍ID 
	uint32 PlayerSkillId=3; //心法ID
	uint32 Index =4;//装备位置
}
//卸下秘籍
message C2G_RemoveBookReq
{
	uint32 PlayerSkillId=1; //心法ID
	uint32 Index =2;// 秘籍位置
}
message G2C_RemoveBookRes
{
	errorNo.ErrorNo Err = 1;
}
//洗练秘籍
message C2G_RefreshBookReq
{
	uint32 BookId =1;//秘籍ID 
	uint32 PlayerSkillId=2; //心法ID
	map<uint32,bool>SlotLock =3;//锁定词条  key 孔位  value 是否锁定
}
message G2C_RefreshBookRes
{
	errorNo.ErrorNo Err = 1;
	PlayerSkillBook book=2;//
}
//洗练确认或者取消
message C2G_RefreshBookConfirmReq
{
	uint32 BookId =1;//秘籍ID 
	uint32 PlayerSkillId=2; //心法ID
	bool IfConfirm=3;// true 确认保留  false 取消
}
message G2C_RefreshBookConfirmRes
{
	errorNo.ErrorNo Err = 1;
}


//表示已经读过这些列表了 用于红点
message C2G_ReadSanXiaoRevInfo
{
	repeated string DaiXiaoUIDList_Req = 1;
	repeated string DaiXiaoUIDList_Rev = 2;
}

message G2C_ReadSanXiaoRevInfo
{
	errorNo.ErrorNo Err = 1;
}
//请求主角激活品阶 星级
message C2G_ActivatePlayerAttrReq
{
	string  attrName= 1; // Quality 或者 star	
}
message G2C_ActivatePlayerAttrRes
{
	errorNo.ErrorNo Err = 1;
	string  attrName= 2;
}

//家园商店购买
message C2G_BuyItemInHomeStore
{
	uint32 HomeStoreCfgID = 1;
}

message G2C_BuyItemInHomeStore
{
	errorNo.ErrorNo Err = 1;
	HomeOrnament Ornament = 2;
}

//新手引导记录
message C2G_SaveBeginnerGuidance
{
	string Steps = 1;
	uint32 State = 2;
	uint32 GuideAwardCfgID = 3;
	bool AllGongMing = 4;
}

message G2C_SaveBeginnerGuidance
{
	map<string,uint32> BeginnerGuidanceSteps = 1;
	errorNo.ErrorNo Err = 2;
}

message G2C_PlayerDataSyncFinish
{
	errorNo.ErrorNo Err = 2;
}
message G2C_PlayerDataReconnectSyncFinish
{
	errorNo.ErrorNo Err = 1;
}

//进入协助副本请求
message C2G_EnterAssistLevelReq
{
	uint32 AssistID =1; //协助副本配表中的ID
}
message G2C_EnterAssistLevelRes
{
	errorNo.ErrorNo Err = 1;
}

//离开协助副本页面
message C2G_QuitAssistLevelReq
{
	uint32 AssistID =1;
}
message G2C_QuitAssistLevelRes
{
	errorNo.ErrorNo Err = 1;
}
//协助者或者邀请者离开时 互相转发
message G2C_QuitAssistLevelNotify
{
	uint32 AssistID =1;
}

//邀请玩家协助副本
message C2G_InviteAssistReq
{
	uint32 AssistID =1; //副本ID
	uint32 LevelID =2; //关卡ID
	cliAllEnum.ChannelType ChannelType=3;
	repeated string PlayerIdList =4; //仅在邀请好友协助时需要
}

message G2C_InviteAssistRes
{
	errorNo.ErrorNo Err = 1;
	string InviteUID=2;//邀请的唯一ID
}

//服务器下发的协助副本广播
message G2C_InviteAssist
{
	string PlayerID = 1;//发出 邀请的玩家
	uint32 AssistID =2; //副本ID
	uint32 LevelID =3; //关卡ID
	string InviteUID=4;//邀请的唯一ID
}
//接受玩家的协助副本邀请
message C2G_AcceptAssistReq
{
	string PlayerID = 1;//发出 邀请的玩家
	uint32 AssistID =2; //副本ID
	uint32 LevelID =3; //关卡ID
	string InviteUID=4;//邀请的唯一ID
}
message G2C_AcceptAssistRes
{
	errorNo.ErrorNo Err = 1;
	string PlayerName = 2 ; // 邀请者信息
	string PlayerHeadIcon = 3;
	uint32 HeadIconFrame = 4;//头像框
	uint32 FightPower =5;
	uint32 MainPlayerSkinCfgID = 6;//主角皮肤配置ID
}
//通知玩家有人接受了邀请
message G2C_PlayerAcceptAssist
{
	string PlayerID = 1;//接受邀请的玩家
	string PlayerName =2 ;
	string PlayerHeadIcon =3;
	uint32 HeadIconFrame = 4;//头像框
	uint32 FightPower =5;
	uint32 MainPlayerSkinCfgID = 6;//主角皮肤配置ID
}

//协助副本
message AssistLevelInfo
{
	uint32 AssistID =1; 
	uint32 Level=2;
	uint32 StartTS=3;
}
message AssistInfo
{
	repeated AssistLevelInfo info=1;
	uint32  PassTimes =2;// 闯关次数 
	uint32  SweepTimes =3;//扫荡次数
	uint32  HelpRewardTimes=4;//玩家剩余获得协助奖励次数
}

message C2G_AssistInfoReq
{
	
}
message G2C_AssistInfoRes
{
	AssistInfo info =1;
}

//协助副本扫荡
message C2G_AssistSweepReq
{
	uint32 AssistID =1; 
}
message G2C_AssistSweepRes
{
	errorNo.ErrorNo Err = 1;
}
//协助副本被邀请者保存阵容请求
message C2G_AssistHelpSaveEmbattleInfoReq
{
	EmbattleInfo EmbattleInfo = 1;
}
message G2C_AssistHelpSaveEmbattleInfoRes
{
	errorNo.ErrorNo Err = 1;
}
//通知邀请者 协助者阵容已经完成
message G2C_AssistNotifyEmbattle
{
	BattlePlayerInfo BattlePlayerInfo = 1;
	uint64 FightPower=2;//阵容战斗力
}
message G2C_SyncAssistLevelInfo
{
	AssistInfo info =1;
}
//房主请求开始挑战
message C2G_AssistStartLevelReq
{
	uint32 AssistID =1; //协助副本配表中的ID
}
message G2C_AssistStartLevelRes
{
	errorNo.ErrorNo Err = 1;
}
//通知被邀请者 房主点了开始挑战
message G2C_AssistStartLevelNotify
{
	uint32 AssistID =1; //协助副本配表中的ID
}
//退出布阵界面
message C2G_AssistQuitEmbattleReq
{
	
}
//通知另外一个人退出布阵界面
message G2C_AssistQuitEmbattleNotify
{
	
}
message C2G_GetTowerDailyAward
{
	
}

message C2G_AssistBattlePlayerInfoReq
{
	string PlayerId=1; //房主ID 
}
message AssistBattlePlayerInfo
{
	repeated BattlePlayerInfo BattlePlayerInfoList=1;
}
message G2C_AssistBattlePlayerInfoRes
{
	map<string,AssistBattlePlayerInfo> Info=1; //key playerid
}
message C2G_AssistChoseSanXiaoPlayerReq
{
	string PlayerId=1; 
}
message G2C_AssistChoseSanXiaoPlayerRes
{
	errorNo.ErrorNo Err = 1;
}
message G2C_AssistChoseSanXiaoPlayerNotify
{
	string PlayerId=1; 
}
message G2C_GetTowerDailyAward
{
	uint32 TowerCfgID = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_RefreshRandStoreReq
{
	cliAllEnum.GeneralStoreType GeneralStoreType = 1;
}
//协助副本开启状态变化通知
message G2C_AssistMapStateNotify
{
	uint32 AssistID=1;
	cliAllEnum.AssistMapState state =2;
}

message G2C_RefreshRandStoreRes
{
	cliAllEnum.GeneralStoreType GeneralStoreType = 1;
	GeneralStoreViewInfo GeneralStoreViewInfo = 2;
	errorNo.ErrorNo Err = 3;
}



message C2G_CurrencyBuyPowerReq
{
	uint32 BuyCount = 1;
	
}

message G2C_CurrencyBuyPowerRes
{
	ItemReq AwardList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_UseWanNengChipReq
{
	bool Use = 1;
	uint32 HeroCfgID = 2;
}

message G2C_UseWanNengChipRes
{
	bool Use = 1;
	uint32 HeroCfgID = 2;
	errorNo.ErrorNo Err = 3;
}


//阵位升级
message C2G_ZhenWeiOneLvUpReq {
	uint32 Postion = 1;
}

message G2C_ZhenWeiOneLvUpRes {
	repeated ItemReq ConsumeList = 1;
	errorNo.ErrorNo Err  = 3;
}

message C2G_ZhenWeiFiveLvUpReq {
	uint32 Postion = 1;
}

message G2C_ZhenWeiFiveLvUpRes {
	repeated ItemReq ConsumeList = 1;
	errorNo.ErrorNo Err  = 3;
}

message C2G_FactionSetReq {
	cliAllEnum.FactionType FactionType = 1;
}

message G2C_FactionSetRes {
	errorNo.ErrorNo Err  = 1;
	cliAllEnum.FactionType FactionType = 2;
	repeated ItemReq ItemList = 3; // 奖励
}

message C2G_GetChatRoomMsgReq{
	string RoomID = 1;
}

message G2C_GetChatRoomMsgRes{
	string RoomID = 1;
	repeated G2C_ChatMsgNotice ChatList = 2;
	errorNo.ErrorNo Err  = 3;
	
}

message C2G_ZhenWeiGradeUpReq{
	uint32 Postion = 1;
}

message G2C_ZhenWeiGradeUpRes{
	
	errorNo.ErrorNo Err  = 1;
	
}

message G2C_UpdateSignInViewInfoRes{
	SignInViewInfo SignInViewInfo = 1;
}


message C2G_SignInReq{
	
}

message G2C_SignInRes{
	errorNo.ErrorNo Err  = 1;
}

message C2G_GetAccumulatedSignInReq{
	uint32 AccumulatedAwardCfgID = 1;//sign_in_accumulated_award中配置表ID
}

message G2C_GetAccumulatedSignInRes{
	errorNo.ErrorNo Err  = 1;
}


message C2G_DispelSyncCmd{
	repeated string JsonCmds = 1;
}

message G2C_DispelSyncCmd{
	repeated string JsonCmds = 1;
	errorNo.ErrorNo Err  = 2;
}


message C2G_DispelSyncFrame{
	uint32 MaxFrame = 1;
}

message G2C_DispelSyncFrame{
	errorNo.ErrorNo Err  = 1;
}

message C2G_RechargeOrderReq
{
	uint32 RechargeCfgID = 1; // 充值商品ID
	string PickGiftPackageUID = 2; //如果是推送礼包 就传推送礼包唯一ID
	cliAllEnum.RechargeType RechargeType = 3; // 充值类型
}
message G2C_RechargeOrderRes
{
	errorNo.ErrorNo Err = 1;
	string OrderID = 2;
	uint32 OrderMoney = 3;
	uint32 RechargeCfgID = 4;
	string ProductID = 5;
	uint32 ProductNum = 6;
	uint32 ServerID = 7;
	string Extension = 8;
	cliAllEnum.RechargeType RechargeType = 9;
}

message C2G_RechargeGetInfoReq
{
}
message G2C_RechargeGetInfoRes
{
	errorNo.ErrorNo Err = 1;
	RechargeInfo RechargeInfo = 2;
}

// 增量更新
message G2C_RechargeUpdateInfoRes
{
	errorNo.ErrorNo Err = 1;
	RechargeInfo RechargeInfo = 2;
}

message G2C_RechargeCompleteRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
	repeated ItemReq ExtraItemList = 3;
	uint32 OrderMoney = 4;
	string OrderID = 5;
	cliAllEnum.RechargeType RechargeType = 6;
}

message C2G_RechargeOrderCancelReq
{
	string OrderID = 1;
}
message G2C_RechargeOrderCancelRes
{
	errorNo.ErrorNo Err = 1;
	string OrderID = 2;
}

// 首充奖励
message C2G_RechargeGetFirstAwardReq
{
}
message G2C_RechargeGetFirstAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
}

message G2C_SyncRechargeGetFirstAwardRes
{
	errorNo.ErrorNo Err = 1;
	RechargeFirstAwardInfo RechargeFirstAwardInfo = 2;
}

message C2G_GetXiXunInfoReq{
}

message G2C_GetXiXunInfoRes{
	XiXunViewInfoList XiXunViewInfoList = 1;
	errorNo.ErrorNo Err  = 2;
}

message C2G_XiXunDianZanReq{
	uint32 XiXunUID = 1;
}

message G2C_XiXunDianZanRes{
	XiXunViewInfoList XiXunViewInfoList = 1;
	uint32 XiXunUID = 2;
	errorNo.ErrorNo Err  = 3;
}

message C2G_RefreshArenaOppoent{
}

message G2C_RefreshArenaOppoent{
  map<uint32,ArenaRankInfoView>  ChallengerList = 1;
  errorNo.ErrorNo Err  = 2;
}

message C2G_BuyArenaChallengeCount{
	uint32 BuyCount = 1;
}

message G2C_BuyArenaChallengeCount{
  errorNo.ErrorNo Err  = 1;
}

message C2G_ChangeGoodFriendRedPoint{
	string PlayerID = 1;
}

message G2C_ChangeGoodFriendRedPoint{
  string PlayerID = 1;
  errorNo.ErrorNo Err  = 2;
}

message C2G_TowerDirectRewardReq{
	uint32 LevelID = 1;
}

message G2C_TowerDirectRewardRes{
	repeated ItemReq ItemList = 1;//奖励
	errorNo.ErrorNo Err  = 2;
}

message C2G_BuyChoukaTimesReq
{
	uint32 BuyType =1;
	uint32 BuyCount = 2;
}

message G2C_BuyChoukaTimesRes
{
	ItemReq AwardList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_OneKeyGetQuestAwardReq
{
	repeated uint32 QuestCfgIDList = 1;
	cliAllEnum.QuestDetailType QuestDetailType = 2;
}

message G2C_OneKeyGetQuestAwardRes
{
	repeated ItemReq AwardList = 1;
	errorNo.ErrorNo Err = 2;
}

//星君赐福
message XingJunInfo
{
	uint32 Num=1;//当前获得星君数量
	map<uint32, uint32>  AchieveList = 2; // 每个章节获取的星君数量 主线
	repeated uint32  ReceiveList =3;//已经领取奖励的章节
	map<uint32, uint32>  LieZhuanAchieveList = 4; // 每个章节获取的星君数量 列传
	map<uint32, uint32>  LieZhuanHardAchieveList = 5; // 每个章节获取的星君数量 困难列传
	map<uint32, uint32>  ClimbTowerAchieveList = 6; // 每个章节获取的星君数量 爬塔
	map<uint32, uint32>  LieZhuanVeryHardAchieveList = 7; // 每个章节获取的星君数量 地狱列传
	map<uint32, uint32>  ShangGuYiJiAchieveList = 8; // 每个章节获取的星君数量 上古遗迹
	
}
message G2C_GetXingJunRes
{
	XingJunInfo XingJunInfo=1;
}

//领取星君赐福奖励请求
message C2G_XingJunRewardReq
{
	uint32 RewardID=1;
}
message G2C_XingJunRewardRes
{
	repeated ItemReq ItemList = 1;//奖励
	errorNo.ErrorNo Err  = 2;
}
//客户端存储再服务的数据
message PlayerServerData 
{
	map<string ,string> data =1;
}

message C2G_ServerDataReq
{
	string key   = 1;
	string value = 2;
}

message G2C_ServerDataRes
{
	string key   = 1;
	string value = 2;
	errorNo.ErrorNo Err  = 3;
}

message G2C_SyncServerData
{
	PlayerServerData PlayerServerData = 1;
}



//擂台具体信息
message C2G_GetRingInfoReq
{
	cliAllEnum.RingType RingType = 1;
}

message G2C_GetRingInfoRes
{
	cliAllEnum.RingType RingType = 1;
	map<uint32,ArenaRankInfoView> OppoentRankList = 2;
	map<uint32,ArenaRankInfoView> RankTopList = 3;
	ArenaRankInfoView Self = 4;
	uint32 SanXiaoResetTs = 5;//三消重置时间
	errorNo.ErrorNo Err  = 10;
}

//擂台主界面信息
message C2G_GetRingMainInfoReq
{
}

message G2C_GetRingMainInfoRes
{
	repeated bool ApplyList = 1;//报名列表
	map<uint32,bool> RingRankDown = 2;//擂台排名下降 key PB_RingType
	repeated bool LastApplyList = 3;//昨天报名的列表
}


message ActivityInfo
{
	string ActivityCfgID = 1;
	cliAllEnum.ActivityState State =2;
	uint32 StartTs = 3;//活动开始时间
	uint32 WaitTs = 4;//活动报名或者准备的截止时间
	uint32 EndTs = 5;//活动结束时间
	uint32 CountDownTs=6;//战前倒计时时间
	uint32 ActivityOpenTs = 7;//活动预览时间
}


//活动状态改变 通知玩家
message G2C_ActivityNotice
{
	repeated ActivityInfo ActivityInfoList = 1;
}

message C2G_RefreshRingOppoentReq
{
	cliAllEnum.RingType RingType = 1;
}

message G2C_RefreshRingOppoentRes
{
	cliAllEnum.RingType RingType = 1;
	errorNo.ErrorNo Err  = 2;
}

message C2G_GetRingTopThreeReq
{
}


message G2C_GetRingTopThreeRes
{
	repeated  RingTopThreeViewInfo RingTopThreeListInfo  = 1;
	errorNo.ErrorNo Err  = 2;
}
message C2G_GetFBMailReq
{
}
message G2C_GetFBMailRes
{
	errorNo.ErrorNo Err  = 1;
}

message C2G_ChangePlayerNameReq
{
	string NewPlayerName = 1;
}

message G2C_ChangePlayerNameRes
{
	string NewPlayerName = 1;
	errorNo.ErrorNo Err  = 2;
} 

//获得登录7天活动奖励
message C2G_GetLoginSevenAwardReq
{
	uint32 Day = 1; //领取7天中的哪一天
}

message G2C_GetLoginSevenAwardRes
{
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err  = 2;
}

message G2C_UpdateLoginSevenAwardInfo
{
	uint32 LoginStartTs = 1; //起始时间
	map<uint32,bool> AlreadyGet = 2;//已经拿到的奖励 key 天数
}

//兑换码
message C2G_GetCodeRewardReq 
{
	string CodeNumber=1;
}

message G2C_GetCodeRewardRes 
{
	errorNo.ErrorNo Err  = 1;
	repeated ItemReq ItemList = 2;//奖励道具
}




//解锁新的开天牌页
message C2G_UnlockKaiTianTabIndexReq
{

}
message G2C_UnlockKaiTianTabIndexRes 
{
	errorNo.ErrorNo Err  = 1;
}

//更新关卡信息
message G2C_UpdateDesentLevelInfo {
	DescentLevelInfo DescentLevelInfo = 1;//种族关卡通关信息
}



// 营地信息
message CampPosInfo
{
	map<uint32, uint32> HeroList = 1; // key:位置 value:herocfgid
	uint32 MaxPos = 2;
}

message CampInfo
{
	map<uint32, CampPosInfo> CampList = 1; // key:营地配置ID
	uint32 Level = 2; // 觉醒等级
	uint32 MaxPlaceCount = 3; // 最大放置数量
	uint32 CurPlaceCount = 4; // 当前放置数量
}

message G2C_SyncCampInfoRes
{
	errorNo.ErrorNo Err  = 1;
	CampInfo CampInfo = 2;
}

// 营地 - 解锁位置
message C2G_CampPosUnlockReq
{
	uint32 CampCfgID = 1;
	uint32 Pos = 2;
}
message G2C_CampPosUnlockRes
{
	errorNo.ErrorNo Err  = 1;
	uint32 CampCfgID = 2;
	uint32 MaxPos = 3;
}

// 营地 - 放置幻灵
message C2G_CampPlaceHerokReq
{
	uint32 CampCfgID = 1;
	uint32 HeroCfgID = 2;
	uint32 Pos = 3;
}
message G2C_CampPlaceHeroRes
{
	errorNo.ErrorNo Err  = 1;
}

// 营地 - 升级
message C2G_CampLevelUpReq
{
}
message G2C_CampLevelUpRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;//奖励道具
}

//修改开天牌标签页名字
message C2G_ChangeKaiTianPaiTabNameReq
{
	string TabName = 1;
	uint32 TabIndex = 2;
}

message G2C_ChangeKaiTianPaiTabNameRes
{
	errorNo.ErrorNo Err  = 1;
}

//一键拆卸开天牌
message C2G_UnequipAllKTReq
{
	uint32 TabIndex = 2;
}

message G2C_UnequipAllKTRes
{
	errorNo.ErrorNo Err  = 1;
}

//开天牌装备 交换位置
message C2G_SwapKaiTianPaiReq
{
	uint32 TabIndex = 1;
	uint32 StartIndex = 2;
	uint32 EndIndex = 3;
}

message G2C_SwapKaiTianPaiRes
{
	errorNo.ErrorNo Err  = 1;
}


message C2G_SwapKTSkillIndexReq
{
	uint32 TabIndex = 1;
	uint32 StartIndex = 2;
	uint32 EndIndex = 3;
}

message G2C_SwapKTSkillIndexRes
{
	errorNo.ErrorNo Err = 2;
}

message C2G_EquipKTSkillIndexReq
{
	uint32 TabIndex = 1;
	uint32 Index = 2;
	uint32 AbilityCfgID = 3;
}

message G2C_EquipKTSkillIndexRes
{
	errorNo.ErrorNo Err = 2;
}

message C2G_UnequipKTSkillIndexReq
{
	uint32 TabIndex = 1;
	uint32 Index = 2;
}

message G2C_UnequipKTSkillIndexRes
{
	errorNo.ErrorNo Err = 2;
}

message C2G_CampRemoveHerokReq
{
	uint32 CampCfgID = 1;
	uint32 Pos = 2;
}
message G2C_CampRemoveHeroRes
{
	errorNo.ErrorNo Err  = 1;
}
//幻灵觉醒
message C2G_HeroAwakeReq
{
	uint32 HeroCfgID=1;
	bool UseWanNengChip = 2;
}
message G2C_HeroAwakeRes
{
	errorNo.ErrorNo Err  = 1;
}
//幻灵潜能 总体升级
message C2G_HeroPotentialReq
{
	uint32 HeroCfgID=1;
}
message G2C_HeroPotentialRes
{
	errorNo.ErrorNo Err  = 1;
}
//幻灵潜能 单个属性升级
message C2G_HeroPotentialAttrReq
{
	uint32 HeroCfgID=1;
	string AttrName =2;
}
message G2C_HeroPotentialAttrRes
{
	errorNo.ErrorNo Err  = 1;
}
//幻灵潜能 属性重置
message C2G_PotentialAttrClearReq
{
	uint32 HeroCfgID=1;
}
message G2C_PotentialAttrClearRes
{
	errorNo.ErrorNo Err  = 1;
}



//幻灵抗灭 升级
message C2G_KangMieLvUpSaveReq
{
	cliAllEnum.KangMieType KangMieType = 1;
	map<uint32,uint32> KMAttrCfgIDList = 3; //key:对应的抗灭属性配置表ID value 升到第几级
}

message G2C_KangMieLvUpSaveRes
{
	errorNo.ErrorNo Err  = 1;
}

//幻灵抗灭 属性重置
message C2G_KangMieLvClearReq
{
	cliAllEnum.KangMieType KangMieType = 1;
}

message G2C_KangMieLvClearRes
{
	errorNo.ErrorNo Err  = 1;
}

message G2C_SyncKangMieInfoRes
{
	map<uint32,HeroKangMieInfo> HeroKangMieInfoList = 1;//抗灭 血脉克御 key PB_KangMieType
	uint32 LastResetTS = 2;//上次重置的时间
}

message G2C_MainUIRedPoint
{
	map<uint32,int32> MainUIRedPointList = 1; //key PB_RedPointType value: -1 不需要红点 , 1 表示红点
}


//请求镇守具体信息
message C2G_GuardInfoReq
{
	uint32 GuardID = 1;
}
message G2C_GuardInfoRes
{
	errorNo.ErrorNo Err  = 1;
	map<uint32,GuardRankInfo> RankInfo=2;// key 排名 value 排名显示信息
	uint32 MyGuildRank=3; //本工会排行
	uint32 MyGuildFriend=4;//本公会好感度
	uint32 GuardID = 5;
	uint32 MyFreeNum=6;//玩家每日免费交互剩余次数
}
//学社镇守事件请求 供奉/诱惑
message C2G_GuardEventReq
{
	uint32 GuardID =1;
	cliAllEnum.GuardEventType type=2;
	uint32  Level =3;//档位
	uint32  Num=4;//数量
}
message G2C_GuardventRes
{
	errorNo.ErrorNo Err = 1;
	bool InviteSuccess=2;//邀请时 是否成功
	uint32 MyFreeNum=3;//玩家每日免费交互剩余次数
}
//学社镇守主界面显示信息
message GuildGuardDisplayerInfo
{
	uint32 GuardID = 1;
	string BelongGuildName=2;//归属学社名字
	uint32 ProtectTime=3;//保护时间
	uint32 Friendness=4;//本学社好感度
}
message G2C_SyncGuildGuardInfo
{
	repeated GuildGuardDisplayerInfo  Info =1;
}

//工会好感度排名请求
message C2G_GuardRankReq
{
	uint32 GuardID =1;
}
message GuardRankInfo
{
	string GuildName=1;
	uint32 Friendiness=2;//好感度
	uint32 GuildIcon=3;
	string GuildID =4;
}
//工会好感度排名请求
message G2C_GuardRankRes
{
	errorNo.ErrorNo Err  = 1;
	map<uint32,GuardRankInfo> RankInfo=2;// key 排名 value 排名显示信息
}

//设定目标镇守
message C2G_SetTargetGuardReq
{
	uint32 GuardID =1;
	bool AddOrCancel=2;// 添加取消目标 true为添加
}
message G2C_SetTargetGuardRes
{
	errorNo.ErrorNo Err  = 1;
}

message G2C_PaoMaDengRes{
	cliAllEnum.PaoMaDengType PaoMaDengType = 1;
	uint32 CfgID = 2;
	repeated string Paras = 3;
	string SysContent = 4;
}


message C2G_SetXinYuanCardReq
{
	map<uint32,uint32> XinYuanCard = 8;//心愿抽 key index value herocfgid
}

message G2C_SetXinYuanCardRes
{
	errorNo.ErrorNo Err  = 1;
}

message G2C_UpdateDrawCardInfo
{
	DrawCardInfo DrawCardInfo = 1; //抽卡信息
	errorNo.ErrorNo Err  = 2;
}


message C2G_SetEmbattlePlayerSkillReq
{
	uint32 EmbattleIndex = 1; //预设阵容
	cliAllEnum.EmbattleType EmbattleType = 2;
	map<uint32,PlayerSkillInfo> PlayerSkills = 3;// key 主角技能ID 
}

message G2C_SetEmbattlePlayerSkillRes
{
	errorNo.ErrorNo Err  = 1;
}
message GuardBossPlayer
{
	string PlayerID=1;
	string PlayerName=2;
	double Damage=3;
	uint32 MainPlayerID = 4; //主角表配置ID
	uint32 EmbattleIndex=5;//防守方当前使用的阵容序列
	uint32 MainPlayerSkinCfgID = 6;//主角皮肤配置ID
}
message GuardAttackOnce
{
	GuardBossPlayer PlayerAttack=1;
	GuardBossPlayer PlayerDefend=2;
	double BossDamage=3;	
}
message G2C_GuardAttackQueue
{
	repeated GuardAttackOnce attacklist=1;
}

message G2C_GuardAttackMy
{
	GuardAttackOnce AttackInfo=1;
	uint32 WaitAlive =2 ;//复活截止时间戳
}

message C2G_JoinGuardBossReq
{
	
}
message G2C_JoinGuardBossRes
{
	errorNo.ErrorNo Err  = 1;
	uint32 InspireNum	 = 2;//鼓舞层数
	uint32 ReviveTimes	 = 3;
}
message G2C_SyncGuardBossBasicInfo
{
	uint32 AttackPlayerNum 	= 1;//攻方人数
	uint32 DefensePlayerNum	= 2;//守方人数
	double MyDamage			= 3;//我的伤害
	uint32 MyDamageRank		= 4;//我的伤害排行
	double CurHp				= 5;//boss 当前血量
	double MaxHp				= 6;//BOSS 最大血量
	uint32 WaitAlive		= 7;//
}
//学社镇守结束
message G2C_GuardBossEnd
{
	bool IFDefenseWin=1;//true守方胜利  false攻方胜利
	RankInfo LastStrikePlayer=2;//最后一击的玩家
	repeated AuctionItemReq AuctionItemList = 3;//掉落的拍卖品
}



message C2G_DescentLevelPlot
{
	uint32 LevelPlotID = 1;
}

message G2C_DescentLevelPlot
{
	errorNo.ErrorNo Err  = 1;
}


message C2G_GetDescentLevelReward
{
}

message G2C_GetDescentLevelReward
{
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err  = 2;
}

//镇守BOSS鼓舞
message C2G_GuardBossInspireReq
{
}

message G2C_GuardBossInspireRes
{
	errorNo.ErrorNo Err  = 1;
	uint32 InspireNum 	 = 2;//鼓舞层数
}

//镇守BOSS玩家复活请求
message C2G_GuardBossReviveReq
{
}

message G2C_GuardBossReviveRes
{
	errorNo.ErrorNo Err  = 1;
	uint32 ReviveTimes=2;
}

//7,14日活动
message G2C_SyncSevenFourtheenInfo
{
	map<uint32,MainQuestInfo> SevenQuestList = 1;
	map<uint32,MainQuestInfo> SevenTimerQuestList = 2;
	uint32 SevenFourteenTimerTs = 4;//下次刷新SevenTimerQuestList FourteenTimerQuestList 列表的时间
	map<uint32,MainQuestInfo> FourteenQuestList = 5;
	map<uint32,MainQuestInfo> FourteenTimerQuestList = 6;
	map<uint32,bool> SevenSaleList = 7;
	map<uint32,bool> FourteenSaleList = 8;
	uint32 SevenActiveNum = 9;
	uint32 FourteenActiveNum = 10;
	uint32 PlayerCreateTs = 11;//玩家创建时间
	map<uint32,bool> SevenActiveAward = 12;
	map<uint32,bool> FourteenActiveAward = 13;
}

message C2G_GetBossDamageRankListReq
{
    uint32 BossID=1;
}

message G2C_GetBossDamageRankListRes
{
	errorNo.ErrorNo Err = 1;
	uint32 BossID=2;
	bool IFDefenseWin=3;//true守方胜利  false攻方胜利
    uint32 total_count = 4;
	uint32 myrank = 5;
	RankInfo myinfo = 6; //
	repeated RankInfo rankinfo =7;
	
}

message G2C_NewBossBoxNotify
{
   string BoxUID = 1;// 宝箱ID
}

message C2G_GetBossBoxReq
{
   string BoxUID = 1;// 宝箱ID
}

message G2C_GetBossBoxRes
{
	errorNo.ErrorNo Err = 1;
	uint32 Id=2;
}

message G2C_DeleteBossBoxNotify
{
   string BoxUID = 1;// 宝箱ID
   string PlayerID = 2;// 
}

message C2G_GuardBossBattleReportReq
{
	cliAllEnum.BattleReportType BattleReportType = 1;
}
message BossBattleReportInfo
{
	uint32 MsgID=1;
	repeated string MsgParam=2;
	string RoomID=3;
}

message G2C_GuardBossBattleReportRes
{
	cliAllEnum.BattleReportType BattleReportType = 1;
	repeated BossBattleReportInfo Info=2;
}
message C2G_GuardBossPlayReportReq
{
	string RoomID=1;
}
message G2C_GuardBossPlayReportRes
{
	G2C_EnterPVEBattle EnterPVEBattle=1;
}
message C2G_GuardBossWaitingQueueReq
{
	
}
message WaitingPlayerInfo
{
	string PlayerName=1;
	string GuildName=2;
	uint32 FightPower=3;
}

message G2C_GuardBossWaitingQueueRes
{
	repeated WaitingPlayerInfo AttackList=1;
	repeated WaitingPlayerInfo DefenseList=2;
}
message G2C_GuardBossSanXiaoBattle
{
	RankInfo  AttackRankInfo=1;
	RankInfo  DefenseRankInfo=2;
}
//领奖
message C2G_GetSevenQuestReq
{
	uint32 QuestCfgID = 1;
}

message G2C_GetSevenQuestRes
{
	repeated ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

//领奖
message C2G_GetSevenTimerQuestReq
{
	uint32 QuestCfgID = 1;
}

message G2C_GetSevenTimerQuestRes
{
	repeated ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

//领奖
message C2G_GetFourteenQuestReq
{
	uint32 QuestCfgID = 1;
}

message G2C_GetFourteenQuestRes
{
	repeated ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

//领奖
message C2G_GetFourteenTimerQuestReq 
{
	uint32 QuestCfgID = 1;
}

message G2C_GetFourteenTimerQuestRes
{
	repeated ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GetBuySevenSaleItemReq
{
	uint32 SevenSaleCfgID = 1;
}

message G2C_GetBuySevenSaleItemRes
{
	ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GetBuyFourteenSaleItemReq
{
	uint32 FourteenSaleCfgID = 1;
}

message G2C_GetBuyFourteenSaleItemRes
{
	ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

//14日活跃奖励
message C2G_GetFourteenActivityItemReq
{
	uint32 FourteenActivityCfgID = 1;
}

message G2C_GetFourteenActivityItemRes
{
	repeated ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GetSevenActivityItemReq
{
	uint32 SevenActivityCfgID = 1;
}

message G2C_GetSevenActivityItemRes
{
	repeated ItemReq GetItem = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_SendFriendPointReq
{
	string PlayerID = 1; //接收方
	bool OneKey = 2;//一键赠送
}

message G2C_SendFriendPointRes
{
	errorNo.ErrorNo Err = 2;
}

message C2G_RevFriendPointReq
{
	string PlayerID = 1; //领取谁的
	bool OneKey = 2;//一键领取
}

message G2C_RevFriendPointRes
{
	errorNo.ErrorNo Err = 2;
}

 
message HomePartyRobberInfo
{
	uint32 UID = 1;
	double pos_x = 2;
	double pos_y = 3;
	uint32 RobberCfgID = 4;
}

message G2C_HomePartyRobberDiedRes
{
	string PartyID = 1;
	HomePartyRobberInfo  Robber = 2;
}

message C2G_EnterRobberBattleReq
{
	uint32 RobberUID = 1;
}

message G2C_EnterRobberBattleRes
{
	uint32 RobberUID = 1;
	G2C_EnterPVEBattle G2C_EnterPVEBattle = 2;
	errorNo.ErrorNo Err = 3;
}

message C2G_PlayerSummaryInfoReq
{
	string PlayerID = 1;
}

message G2C_PlayerSummaryInfoRes
{
	string PlayerID = 1;
    string PlayerName = 2;
	string PlayerHeadIcon = 3;//玩家头像
	uint32 MainPlayerCfgID = 4;//主角表配置ID
	uint32 MainPlayerLv = 5;//玩家等级
	uint32 PlayerVipLv = 6;//玩家VIP等级
	string GuildID = 7;
	string GuildName = 8;
	string ServerID = 9;
	uint32 FriendJiBanLv = 10;
	uint32 FriendJiBanExp = 11;
	cliAllEnum.FactionType FactionType = 12; // 阵营类型
	cliAllEnum.GuildJobType GuildJob = 13; // 公会职务
	uint64 FightingNum = 14;
	bool IsOnline = 15;
	uint32 WeekContribution = 16;//工会周贡献值	
	uint32 MainPlayerSkinCfgID = 17;//主角皮肤配置ID
	uint32 HeadIconFrame = 18;//头像框
	uint32 PlayerTitleID = 19;//玩家称号
	errorNo.ErrorNo Err = 25;
}

message C2G_FinishQuestReq
{
	uint32 Id =1;
}

message G2C_FinishQuestRes
{
	errorNo.ErrorNo Err = 1;
	uint32 Id =2;
}

message C2G_UseDaiXiaoDataReq
{
	string DaiXiaoUID = 1; //代消条件下的UID
}

message G2C_UseDaiXiaoDataRes
{
	errorNo.ErrorNo Err = 1;
	cliAllEnum.PVEType PVEType = 2;
}

message C2G_DelDaiXiaoRevReq
{
	string DaiXiaoUID = 1; //代消条件下的UID
}

message G2C_DelDaiXiaoRevRes
{
	errorNo.ErrorNo Err = 1;
}

//查看阵容
message C2G_ViewEmbattleReq
{
	string PlayerID =1;
}

message G2C_ViewEmbattleRes
{
	string PlayerID =1;
	uint32 CurLevelClear = 2;//当前通关ID
	ArenaRankInfoView Info=3;//主线阵容信息
	uint32 LoginDays=4;//登录天数
	uint32 AchievementSum=5;//成就完成数量
	repeated uint32 GuardIdlist=6;
	string GuildName=7;
	string OwnerPlayerName=8;
	uint32 IconID=9;
}

message C2G_CreateShortcutBattle {
	uint32 LevelID = 1;
	cliAllEnum.PVEType PVEType = 2;
	ChallengerInfo ChallengerInfo = 5;//挑战者信息
}

message G2C_CreateShortcutBattle {
	cliAllEnum.PVEType PVEType = 1;
	G2C_BattleOver G2C_BattleOver = 2;//战斗结果
	errorNo.ErrorNo Err = 3;
}

message C2G_GetZhanLingRewardReq 
{
	uint32 CfgID=1;
	cliAllEnum.ZhanLingPayType PayType=2;
	cliAllEnum.ZhanLingType ZhanLingType=3;
}

message G2C_GetZhanLingRewardRes
{
	errorNo.ErrorNo Err = 1;
    repeated ItemReq ItemList = 2;//奖励
}

//战令
message ZhanLingInfo
{
	repeated uint32 NormalZhanling=1;
	repeated uint32 PayZhanling=2;
	repeated uint32 PayGroupId=3;
}
message ZhanLingAwardInfo
{
	repeated cliAllEnum.ZhanLingType type=1;
}
message G2C_SyncZhanLingInfo
{
	ZhanLingInfo PVEInfo=1;
	ZhanLingInfo TowerInfo=2;
	ZhanLingInfo RelicsInfo=3;
	map<uint32,ZhanLingAwardInfo>  PayCountAwardInfo=4;//已领取的全服战令购买次数奖励
	ZhanLingInfo LevelInfo=5;
	ZhanLingInfo LieZhuanInfo=6;
}

message C2G_GetAccountBindRewardReq
{
	
}

message G2C_GetAccountBindRewardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;//突破奖励
}

message G2C_SyncShangGuInfo {
	ShangGuYiJiViewInfo ShangGuYiJiViewInfo = 1;
	errorNo.ErrorNo Err = 2;
}


message C2G_GetShangGuTimerAward {
}

message G2C_GetShangGuTimerAward {
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GetShangGuShortcutAward {
}

message G2C_GetShangGuShortcutAward {
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GetFightPowerVideo {
	cliAllEnum.PVEType PVEType = 1;
	uint32 LevelID = 2;
}

message G2C_GetFightPowerVideo {
	map<uint32,FightPowerViewVideo> FightPowerViewVideoList = 1;
	errorNo.ErrorNo Err = 2;
}


//灵根合成
message C2G_SummonLingGenReq {
	uint32 ItemCfgID = 1;
	uint32 ItemNum = 2;
	uint32 ConsumeItemCfgID = 3;
}

message G2C_SummonLingGenRes {
	ItemReq Item = 1;
	errorNo.ErrorNo Err = 2;
}

message G2C_SyncZhanlingPayCount
{
	map<uint32,uint32> ZhanlingPayCount=17;//key ZhanLingType  全服战令购买次数
}

message C2G_GetZhanlingPayCountAwardReq 
{
	uint32 Id=1;
	cliAllEnum.ZhanLingType ZhanLingType=2;
}

message G2C_GetZhanlingPayCountAwardRes
{
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_LockStampReq 
{
	string StampUID = 1;
}

message G2C_LockStampRes
{
	errorNo.ErrorNo Err = 1;
}


message C2G_ShangGuInfoViewReq 
{
}

message G2C_ShangGuInfoViewRes
{
	errorNo.ErrorNo Err = 1;
}


//月卡
message YueKaInfo
{
	uint32 BuyTime=1;// 购买时间  未购买时为空
	bool IFGet=2;//当日是否可领取 true可领取
	uint32 SumItemNum=3;//累计获得
	uint32 NextUpdateTS=4;
}

message G2C_SyncYueKaInfo
{
	map<uint32,YueKaInfo> Info=1;// key 月卡配置表ID
}

message C2G_GetYueKaRewardReq 
{
	uint32 CfgID=1;
}

message G2C_GetYueKaRewardRes
{
	errorNo.ErrorNo Err = 1;
    ItemReq ItemList = 2;//奖励
}

message C2G_ClickChatButtonReq
{
	string PlayerID = 1;
}

message G2C_ClickChatButtonRes
{
	repeated GoodFriendInfo RecentChatInfoList = 1;
	string PlayerID = 2;
	errorNo.ErrorNo Err = 3;
}

message C2G_UseHeroSkinReq
{
	uint32 HeroCfgID = 1;
	uint32 HeroSkinCfgID = 2;
}

message G2C_UseHeroSkinRes
{
	errorNo.ErrorNo Err = 1;
}

message C2G_UsePlayerSkinReq
{
	uint32 PlayerSkinCfgID = 2;
}

message G2C_UsePlayerSkinRes
{
	errorNo.ErrorNo Err = 2;
}

message G2C_SyncHeroSkinList
{
	map<uint32,SkinViewInfo> HeroSkinList = 1;
}

message G2C_SyncPlayerSkinList
{
	map<uint32,SkinViewInfo> MainPlayerSkinList  = 1;
	uint32 MainPlayerSkinCfgID = 2;
}

message G2C_SyncQiFuInfo
{
	uint32 PayCount=1;//当日充值金额
	map<uint32,uint32> GetItemList=2;//key:已经领取的ID recharge_pray中的ID value  时间
}

message C2G_QiFuReq 
{
}

message G2C_QiFuRes
{
	errorNo.ErrorNo Err = 1;
    ItemReq ItemList = 2;//奖励
	uint32 RechargePrayCfgID = 3;
}

//每日特惠60元购买领取信息
message DailyDealInfo
{
	uint32 PayTime=1;//购买时间  未购买时为0
	repeated uint32 GetCfgIDList=2;//当日已经领取的id recharge_store中的ID
}

message G2C_SyncDailyDealInfo
{
	uint32 PayTime=1;//购买时间  未购买时为0
	repeated uint32 GetCfgIDList=2;//当日已经领取的id recharge_store中的ID
}

message G2C_GetDailyDealRewardReq
{
	repeated uint32 CfgID=1;//recharge_store中的ID
}

message G2C_GetDailyDealRewardRes
{
	errorNo.ErrorNo Err = 1;
    repeated ItemReq ItemList = 2;//奖励
}


//创建一场多队
message C2G_CreateSomePVEBattle {
	uint32 LevelID = 1;
	cliAllEnum.PVEType PVEType = 2;
	string CliVer = 3;//客户端版本号
}

message G2C_EnterSomePVEBattle {
	repeated G2C_EnterPVEBattle EnterList = 1;
	repeated G2C_BattleOver OverList = 2;
	cliAllEnum.PVEType PVEType = 3;
	errorNo.ErrorNo Err = 20;
}

message G2C_UpdateMainPlayerHeadIcon {
	string PlayerHeadIcon = 1;
}

message G2C_SyncPlayerSevenDayInfo
{
	map<uint32,uint32>  FightRankReward=1;// key 奖励表id  value cliAllEnum.SevenDayRewardType
	map<uint32,uint32> 	AwakenRankReward=2;
	map<uint32,uint32>  LevelRankReward=3;
	uint32 EndTime =4;
}
message C2G_GetSevenDayRewardReq
{
	uint32 CfgID=1;// 领取奖励的配置表id
	cliAllEnum.SevenDayRankType Type =2;
}
message G2C_GetSevenDayRewardRes
{
	errorNo.ErrorNo Err = 1;
    repeated ItemReq ItemList = 2;//奖励
}


message G2C_SyncAllPickGiftPackage {
	map<string,GiftPackageInfo> AllGiftPackage = 1; //key: GiftPackageUID
	errorNo.ErrorNo Err = 2;
}

message G2C_SyncWeekGiftPackage {
	uint32 WeekGiftPackageCfgID = 1;
	bool IsFirst = 2;//表示第一周
	uint32 ResetWeekBuyCountTs = 3;
	errorNo.ErrorNo Err = 4;
}

message G2C_SyncDayGiftPackage {
	uint32 DayGiftPackageCfgID = 1;
	uint32 ResetDailyBuyCountTs = 2;
	errorNo.ErrorNo Err = 3;
}
message G2C_SyncStarAwakenQuestInfo
{
	map<uint32,MainQuestInfo> StarAwakenQuestList = 1; //
    errorNo.ErrorNo Err  = 3;
}
message G2C_SyncStarAwakenInfo
{
	uint32 StarAwakenNum=1;//觉醒值
	repeated uint32 GetAwardList=2;//已经领取的ID
	uint32 SystemOpenTime=3;//玩家开启天下觉灵的时间
}
message C2G_GetStarAwakenRewardReq
{
	uint32 CfgID=1;// 领取奖励的配置表id
}

message G2C_GetStarAwakenRewardRes
{
	errorNo.ErrorNo Err = 1;
    repeated ItemReq ItemList = 2;//奖励
}

message C2G_ActivePickGiftPackageReq
{
}

message G2C_ActivePickGiftPackageRes
{
	errorNo.ErrorNo Err = 1;
}

message TitleInfo
{
	cliAllEnum.TitleActiveState State=1;
	uint32 EffectiveTime=2;//有效期截止时间 为空/零 时表示永久有效
}

//玩家称号
message G2C_SyncPlayerTitleInfo
{
	map<uint32,TitleInfo> TitleList =1;//key 称号ID   
	uint32 TitleNow=3;// 当前装备的称号
}

//激活玩家称号
message C2G_ActivePlayerTitleReq
{
	uint32 TiltleID=1;
}

message G2C_ActivePlayerTitleRes
{
	errorNo.ErrorNo Err = 1;
}
//装备玩家称号
message C2G_EquipPlayerTitleReq
{
	uint32 TiltleID=1;
}

message G2C_EquipPlayerTitleRes
{
	errorNo.ErrorNo Err = 1;
}

message C2G_PayZeroMoneyReq
{
	uint32 RechargeCfgID = 1;
}

message G2C_PayZeroMoneyRes
{
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err = 2;
}

// 1000抽
message ThousandDrawCardInfo
{
	repeated ItemReq ItemList=1;
	uint32 HighestGradeItemId=2;//这组中最高品级的ID
}
message G2C_SyncThousandDrawCardInfo
{
	uint32 NowRound=1;//当前轮次
	map<uint32 ,ThousandDrawCardInfo> Info =2;
}

message C2G_ThousandDrawCardReq 
{
	uint32 Index=1;
}
message G2C_ThousandDrawCardRes 
{
	repeated ItemReq Item = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_ThousandCardGetReq 
{
	uint32 Index=1;
}
message G2C_ThousandCardGetRes 
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq Item = 2;
}

message HeadIconInfo 
{
	uint32 GetTime = 1; // 获得时间
	uint32 ExpireTime = 2; // 过期时间 0是永久
}

message SpaceVisitorInfoView
{
	cliAllEnum.PlayerSpaceVisitActionType ActionType = 1;
	uint32 Time = 2;
	string PlayerID = 3;
	string PlayerName = 4;
	string PlayerHeadIcon = 5;
	uint32 HeadIconFrame = 6;//头像框
	uint32 PlayerVipLv = 7;
	uint32 PlayerLevel = 8;
	uint32 MainPlayerCfgID = 9;//主角ID
	uint32 MainPlayerSkinCfgID = 10;//主角皮肤配置ID
}

message SpaceVisitorListInfoView
{
	uint32 MaxCount = 1;
	uint32 CurDayCount = 2;
	repeated SpaceVisitorInfoView VisitorList = 3;
}

message SpacePhoto
{
	uint32 LikeCount = 1;
	string Url = 2;
}

message PlayerSpaceInfo 
{
	map<uint32,TitleInfo> TitleList = 1;//key 称号ID
	uint32 TitleNow = 2;// 当前装备的称号
	map<uint32,HeadIconInfo> HeadIconList = 3; // 头像列表 K:IconCfgID V:HeadIconInfo
	map<uint32,HeadIconInfo> HeadIconFrameList = 4; // 头像框列表K:IconCfgID V:Time
	uint32 CurHeadIcon = 5; // 当前使用头像
	uint32 CurHeadIconFrame = 6; // 当前使用头像框
	map<uint32,uint32> NewHeadIconList = 7; // 头像列表 IconCfgID
	map<uint32,uint32> NewHeadIconFrameList = 8; // 头像框列表 IconCfgID
	repeated uint32 LabelList = 9; // 个性标签列表 V:LabelCfgID
	string MoodText = 10; // 个人心情
	SpaceVisitorListInfoView SpaceVisitorListInfoView = 11; // 访问记录
	map<uint32, SpacePhoto> PhotoAlbum = 12; // 相册 K：Pos
	map<string, uint32> PhotoLikeList = 13; // 给他人相片点赞记录
	string CostomHeadIcon = 14; // 玩家自定义头像URL
}

message PlayerBasicInfo 
{
	string PlayerID = 1;
	string PlayerName = 2;
	string PlayerHeadIcon = 3;
	uint32 HeadIconFrame = 4;//头像框
	uint32 PlayerVipLv = 5;
	uint32 PlayerLevel = 6;
	uint32 MainPlayerCfgID = 7;//主角ID
	cliAllEnum.FactionType FactionType = 8; // 阵营类型
	uint32 MainPlayerSkinCfgID = 9;//主角皮肤配置ID
	uint32 PlayerTitleID = 10;//玩家称号
	string GuildID = 11;
	string GuildName = 12;
	uint32 GuildIcon = 13;
	uint64 FightPower = 14;
	uint32 OfflineTime = 15;
	bool IsOnline = 16;//是否在线
	uint32 PVELevelID = 17;
	repeated uint32 GuardIDList = 18;//所在学社用于的镇守
	repeated uint32 LabelList = 19; // 个性标签列表 V:LabelCfgID
	string MoodText = 20; // 个人心情
	map<uint32, SpacePhoto> PhotoAlbum = 21; // 相册 K：Pos
	uint32 MeiLiVal = 22;
	uint32 HaoQiVal = 23; 
}

message G2C_SyncPlayerSapceInfoRes 
{
	errorNo.ErrorNo Err = 1;
	PlayerSpaceInfo PlayerSpaceInfo = 2;
}

message G2C_UpdatePlayerSapceInfoRes 
{
	errorNo.ErrorNo Err = 1;
	PlayerSpaceInfo PlayerSpaceInfo = 2;
	repeated string UpdateFlags = 3;
}

message C2G_SetPlayerHeadIconReq 
{
	uint32 IconCfgID = 1;
}
message G2C_SetPlayerHeadIconRes 
{
	errorNo.ErrorNo Err = 1;
	uint32 IconCfgID = 2;
}

message C2G_SetPlayerHeadFrameIconReq 
{
	uint32 IconCfgID = 1;
}
message G2C_SetPlayerHeadFrameIconRes 
{
	errorNo.ErrorNo Err = 1;
	uint32 IconCfgID = 2;
}

message C2G_GetPlayerBasicInfoReq 
{
	string PlayerID = 1;
}
message G2C_GetPlayerBasicInfoRes 
{
	errorNo.ErrorNo Err = 1;
	PlayerBasicInfo PlayerBasicInfo = 2;
}

message C2G_ClearHeadIconNewReq 
{
	uint32 Type = 1; // 1: 头像 2:头像框
}
message G2C_ClearHeadIconNewRes 
{
	errorNo.ErrorNo Err = 1;
	uint32 Type = 2;
}

// 个性标签
message C2G_SetPlayerLabelReq 
{
	repeated uint32 LabelList = 1;
}
message G2C_SetPlayerLabelRes 
{
	errorNo.ErrorNo Err = 1;
	repeated uint32 LabelList = 2;
}

// 个人心情
message C2G_SetPlayerMoodReq 
{
	string MoodText = 1;
}
message G2C_SetPlayerMoodRes 
{
	errorNo.ErrorNo Err = 1;
	string MoodText = 2;
}

// 访问记录
message C2G_SetPlayerSpaceVisitorActionReq 
{
	string PlayerID = 1;
	cliAllEnum.PlayerSpaceVisitActionType ActionType = 2;
}
message G2C_SetPlayerSpaceVisitorActionRes 
{
	errorNo.ErrorNo Err = 1;
}

message C2G_GetPlayerSpaceVisitorInfoReq 
{
}
message G2C_GetPlayerSpaceVisitorInfoRes 
{
	errorNo.ErrorNo Err = 1;
	SpaceVisitorListInfoView SpaceVisitorListInfoView = 2;
}

// 获取相册信息
message C2G_GetPlayerSpacePhotoInfoReq 
{
}
message G2C_GetPlayerSpacePhotoInfoRes 
{
	errorNo.ErrorNo Err = 1;
	map<uint32, SpacePhoto> PhotoAlbum = 2;
}

// 上传相片
message C2G_SetPlayerSpacePhotoReq 
{
	uint32 Pos = 1;
	string Url = 2;
}
message G2C_SetPlayerSpacePhotoRes 
{
	errorNo.ErrorNo Err = 1;
	uint32 Pos = 2;
	string Url = 3;
}

// 删除相片
message C2G_DeletePlayerSpacePhotoReq 
{
	uint32 Pos = 1;
}
message G2C_DeletePlayerSpacePhotoRes 
{
	errorNo.ErrorNo Err = 1;
	uint32 Pos = 2;
}


// 相片点赞
message C2G_SetPlayerSpacePhotoLikeReq 
{
	string PlayerID = 1;
	uint32 Pos = 2;
}
message G2C_SetPlayerSpacePhotoLikeRes 
{
	errorNo.ErrorNo Err = 1;
	string PlayerID = 2;
	map<uint32, SpacePhoto> PhotoAlbum = 3; // 相册 K：Pos
}

// 自定义头像
message C2G_SetPlayerCustomHeadIconReq 
{
	string HeadIcon = 1;
}
message G2C_SetPlayerCustomHeadIconRes 
{
	errorNo.ErrorNo Err = 1;
	string HeadIcon = 2;
}

message C2G_GetVIPRewardReq 
{
	uint32 ID=1;
}
message G2C_GetVIPRewardRes 
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq Item = 2;
}

message G2C_SyncVIPRewardInfo
{
	repeated uint32 VIPRewardGetList=1;//玩家领取过的VIP奖励 player_vip_lv表ID 
}

// 下载包奖励
message C2G_GetDownloadRewardReq 
{
}
message G2C_GetDownloadRewardRes 
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
}

// 充值成功后获取奖励信息
message C2G_GetRechargeItemListReq
{
	string OrderID = 1;
}

message G2C_GetRechargeItemListRes 
{
	string OrderID = 1;
	repeated ItemReq ItemList = 2;
	repeated ItemReq ExtraItemList = 3;
	errorNo.ErrorNo Err = 4;
}

message C2G_GetDailyPhysicalReq
{
	string Id=1;//activity_time表中的key
}

message G2C_GetDailyPhysicalRes 
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
}

message G2C_SyncDailyPhysicalInfo
{
	map<string,bool> DailyPhysicalInfo = 1;//每日体力领取
}




// 幻灵任务完成奖励
message C2G_GetHeroQuestAwardReq
{
}
message G2C_GetHeroQuestAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
}

// 活动信息
message BusinessActivityInfo
{
	string ActivityID = 1; // 动态ID
	uint32 ActivityCfgID = 2; // 配置ID
	uint32 StartTime = 3;
	uint32 EndTime = 4;
	cliAllEnum.BusinessActivityOpenType OpenType = 5;
	cliAllEnum.BusinessActivityState State = 6;
	RechargeTotalMoneyActivityInfo RechargeTotalMoneyActivityInfo = 7; // 累计充值活动动态配置信息
}

// 登录同步
message G2C_SyncBusinessActivityListRes 
{
	errorNo.ErrorNo Err = 1;
	map<uint32, BusinessActivityInfo> ActivityList = 2; //key 活动配置表ID
}

// 更改同步
message G2C_UpdateBusinessActivityInfoRes 
{
	errorNo.ErrorNo Err = 1;
	BusinessActivityInfo ActivityInfo = 2;
}

// 根据活动ID获取活动信息
message C2G_BusinessActivityGetInfoByTypeReq
{
	uint32 ActivityCfgID = 1;
}
message G2C_BusinessActivityGetInfoByTypRes
{
	errorNo.ErrorNo Err = 1;
	BusinessActivityInfo BusinessActivityInfo = 2;
}

// 累计充值活动动态配置
message RechargeTotalMoneyItem
{
}
message RechargeTotalMoneyActivityInfo
{
	map<uint32, RechargeTotalMoneyItem> List = 1;
}

message RechargeTotalMoneyPlayerInfo
{
	uint32 TotalMoney = 1;
	map<string, double> CurrencyTotalCounter = 2; // 累计货币统计 K:货币类型 V:总金额
	map<uint32, bool> AwardGetList = 3; // 奖励领取列表
}

message G2C_SyncRechargeTotalMoneyActivityInfoRes 
{
	errorNo.ErrorNo Err = 1;
	RechargeTotalMoneyPlayerInfo PlayerInfo = 2;
}

// 累计充值奖励获取
message C2G_RechargeTotalMoneyGetAwardReq
{
	string ActivityID = 1; // 活动动态ID
	uint32 ID = 2; // 档位配置ID
}
message G2C_RechargeTotalMoneyGetAwardRes
{
	errorNo.ErrorNo Err = 1;
	uint32 ID = 2;
	repeated ItemReq ItemList = 3;
}

//查看阵容中英雄详细信息
message C2G_ViewEmbattleHeroInfoReq
{
	string PlayerID =1;
	cliAllEnum.HeroType HeroType=2;
	
}

message ViewEmbattleKTTabInfo
{
	map<uint32,uint32> KTTabSkillList = 1;//开天牌技能列表 value abilitycgfid
	map<uint32,uint32> EquipKaiTianPai = 2; //key slot，

	uint32 StampItemID = 3;
	repeated uint32 KaiTianStrongerSkill = 4;
	cliAllEnum.ItemQuality StampQuality = 5;//品质
	repeated StampAttr StampAttr = 6;//拥有的属性 
}

message ViewEmbattleHeroInfo
{
	uint32 HeroCfgID = 1;
	uint32 Stars = 2;
	GodWeaponInfo GodWeaponInfo = 3;//神器
	cliAllEnum.HeroQuality HeroQuality = 4;//英雄品质 可变化
	map<uint32,uint32> SkillLv = 5;//技能的等级
	ZhenWeiInfo ZhenWeiInfo=6;//装备/法相
	uint32 AwakeLevel = 7;//幻灵觉醒等级 add by tn 20211210

	uint32 SkinCfgID = 8;//皮肤配置ID
	uint32 HeroFightPower=9;
	map<string,double> HeroAttr=10;//英雄扩展属性
	ViewEmbattleKTTabInfo  ViewEmbattleKTTabInfo=11;
	
}

message G2C_ViewEmbattleHeroInfoRes
{
	repeated ViewEmbattleHeroInfo Info=1;
	cliAllEnum.HeroType HeroType=2;
}

// 决战山海活动信息
message SevenDayRankActivityInfo
{
	cliAllEnum.RankType RankType = 1;
	uint32 StartTime = 2;
	uint32 EndTime = 3;
	cliAllEnum.SevenDayActivityState State = 4;
	uint32 PaoMaDengTime = 5; // 倒计时
}

// 决战山海活动排行任务
message FightShanHaiRankQuestInfo
{
	map<uint32, uint32> ScoreList = 1; //起始分值 k: RankType v: score
	map<uint32,MainQuestInfo> RankShangGuQuestList = 2; // 福地榜任务 key QuestCfgID
	map<uint32,MainQuestInfo> RankXinMoQuestList = 3; // 心魔榜任务 key QuestCfgID
	map<uint32,MainQuestInfo> RankFightingNumQuestList = 4; // 战力涨幅榜任务 key QuestCfgID
	map<uint32,MainQuestInfo> RankMingGeScoreQuestList = 5; // 命格涨幅榜任务 key QuestCfgID
	map<uint32,MainQuestInfo> RankKaiTianPaiScoreQuestList = 6; // 御魔涨幅榜 key QuestCfgID
	map<uint32,MainQuestInfo> RankMeiLiScoreQuestList = 7; // 魅力涨幅榜 key QuestCfgID
	map<uint32,MainQuestInfo> RankDrawCardQuestList = 8; // 补天涨幅榜 key QuestCfgID
}


// 同步决战山海活动排行任务
message G2C_SyncFightShanhaiRankQuestInfoRes 
{
    errorNo.ErrorNo Err = 1;
	FightShanHaiRankQuestInfo FightShanHaiRankQuestInfo = 2;
}

// 同步决战山海玩家信息
message G2C_SyncFightShanhaiRankPlayerInfoRes 
{
    errorNo.ErrorNo Err = 1;
	map<uint32, uint32> ScoreList = 2; //起始分值 k: RankType v: score
	uint64 MaxPVEEmabttlePower = 3;//历史最大PVE战斗力
	uint64 MaxMingGeScore = 4;//历史最大命格积分
	uint64 MaxKaiTianPaiScore = 5;//历史最大御魔积分
	uint64 MaxMeiLiScore = 6;//历史最大魅力值
	uint64 MaxDrawCardCount = 7;//历史最大抽卡数
}

message C2G_FXEquipRefineLvUpReq
{
	cliAllEnum.HeroType FaXiangType = 1;
	cliAllEnum.ItemType Slot=2;
	cliAllEnum.FXEquipRefineType RefineType=3;
}
message G2C_FXEquipRefineLvUpRes
{
	errorNo.ErrorNo Err = 1;
	cliAllEnum.HeroType FaXiangType = 2;
	cliAllEnum.ItemType Slot=3;
	uint32 Critical =4;//暴击倍数  默认倍数为1
	bool IFLvUp =5;
	uint32 OldRefineExp=6;
	uint32 NewRefineExp=7;
}


message C2G_RollMoneyTreeReq
{
	
}

message C2G_RollMoneyTreeTenReq
{
	
}

message G2C_RollMoneyTreeRes
{
	uint32 Multiple = 1;
	ItemReq ItemReq = 2;
	errorNo.ErrorNo Err = 3;
}

message G2C_RollMoneyTreeTenRes
{
	repeated G2C_RollMoneyTreeRes ResultList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_GetRollMoneyTreeAwardReq
{
	uint32 Times = 1;
}

message G2C_GetRollMoneyTreeAwardRes
{
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err = 2;
}

message G2C_SyncPoBingInfo
{
	PoBingInfo PoBingInfo = 1;
}

message C2G_GetPoBingAwardReq
{
	uint32 PoBingIndex = 1;
	uint32 PoBingDay = 2;
}

message G2C_GetPoBingAwardRes
{
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err = 2;
}

//学社 膜拜镇守
message C2G_GuildGuardWorshipReq
{

}
message G2C_GuildGuardWorshipRes
{
	repeated ItemReq ItemList = 1;
	errorNo.ErrorNo Err = 2;
}

// 公会发展任务奖励领取
message C2G_GetGuildDevelopChapterAwardReq
{
	uint32 GroupID = 1;
}
message G2C_GetGuildDevelopChapterAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
	uint32 GroupID = 3;
}

message C2G_WorldMatchOpponentReq
{
}

message G2C_WorldMatchOpponentRes
{
	cliAllEnum.PVEType PVEType = 1;
	G2C_BattleOver G2C_BattleOver = 2;//战斗结果
	G2C_EnterPVEBattle G2C_EnterPVEBattle = 3;
	errorNo.ErrorNo Err = 4;
}

message C2G_GetGuildDevelopQuestAwardReq
{
	uint32 QuestCfgID = 1;
}
message G2C_GetGuildDevelopQuestAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
	uint32 QuestCfgID = 3;
}
//设置命格心愿
message C2G_SetMingGeWishReq
{
	uint32 ItemID = 1;
}
message G2C_SetMingGeWishRes
{
	errorNo.ErrorNo Err = 1;
}
// 命格抽卡
message MingGeDrawCardInfo
{
	uint32 WishItemId=1;
	uint32 DrawNum=2;//已经抽卡次数
}
message G2C_SyncMingGeDrawCardInfo
{
	MingGeDrawCardInfo Info=1;
}

message C2G_MingGeDrawOneCardReq 
{
	
}

message G2C_MingGeDrawOneCardRes 
{
	repeated ItemReq Item = 1;
	errorNo.ErrorNo Err = 2;
}
message C2G_MingGeDrawTenCardReq 
{
	
}

message G2C_MingGeDrawTenCardRes 
{
	repeated ItemReq Item = 1;
	errorNo.ErrorNo Err = 2;
}
//同步周期活动任务 每日任务
message G2C_SyncPeriodActDailyQuestInfoRes 
{
    errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> PeriodActDailyQuestList=2; // 每日任务 key period_daily_task
}

//同步周期活动任务 成就任务
message G2C_SyncPeriodActAchieveQuestInfoRes 
{
    errorNo.ErrorNo Err = 1;
	map<uint32,MainQuestInfo> PeriodActAchievementQuestList=2; // 每日任务 key period_daily_task
}

//领取跨服匹配赛季段位奖励
message C2G_GetWorldMatchSeasonScoreAward
{
	uint32 MatchDailyRewardCfgID = 1;
}

//领取跨服匹配赛季段位奖励
message G2C_GetWorldMatchSeasonScoreAward 
{
	uint32 MatchDailyRewardCfgID = 1;
	repeated ItemReq ItemList = 2;
    errorNo.ErrorNo Err = 3;
}

message G2C_SyncPlayerGiftSys
{
	repeated  PlayerGiftNtfViewInfo RevRecordList = 1;
	repeated  PlayerGiftNtfViewInfo SendRecordList = 2;
	uint32 MeiLiVal = 4;
	uint32 HaoQiVal = 5;
	repeated G2C_PlayerSummaryInfoRes ZuiJinList = 6;
}

message C2G_SendGiftToPlayerReq
{
	repeated string PlayerIDList = 1;
	ItemReq GiftItem = 2;
}

message G2C_SendGiftToPlayerRes
{
	ItemReq GiftItem = 1;
	repeated string PlayerIDList = 2;
	errorNo.ErrorNo Err = 3;
}

message G2C_NtfGiftToAllPlayerRes
{
	string SenderPlayerID = 1;
	string SenderPlayerName = 2;
	string RevPlayerID = 3;
	string RevPlayerName = 4;
	ItemReq GiftItem = 5;
	errorNo.ErrorNo Err = 6;
}

// 御魔牌抽卡
message YMPDrawCardInfo
{
	uint32 WishItemId=1;
	uint32 DrawNum=2;//已经抽卡次数
}

//设置命格心愿
message C2G_SetYMPWishReq
{
	uint32 ItemID = 1;
}

message G2C_SetYMPWishRes
{
	errorNo.ErrorNo Err = 1;
}

message G2C_SyncYMPDrawCardInfo
{
	YMPDrawCardInfo Info=1;
}

message C2G_YMPDrawOneCardReq 
{
	
}

message G2C_YMPDrawOneCardRes 
{
	repeated ItemReq Item = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_YMPDrawTenCardReq 
{
	
}

message G2C_YMPDrawTenCardRes 
{
	repeated ItemReq Item = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_PlayerGiftSysReadReq 
{
	
}

message G2C_PlayerGiftSysReadRes
{
	
}

//送礼系统最近列表
message C2G_PlayerGiftSysZuiJinReq 
{
	string PlayerID = 1;
}

message G2C_PlayerGiftSysZuiJinRes
{
	
}


//激活神器图集
message C2G_ActiveGodWeaponAtlasReq {
	uint32 GodWeaponCfgID = 1;
}

//激活神器图集
message G2C_ActiveGodWeaponAtlasRes {
	errorNo.ErrorNo Err = 1;
}

// VIP特权属性
message VipAttr {
	uint32 PhotoNum = 1; // 相片数量
	uint32 CustomHeadIcon = 2; // 是否可以自定义头像 0:否 1:是
}

message G2C_SyncVipAttrRes {
	errorNo.ErrorNo Err = 1;
	VipAttr VipAttr = 2;
}

// 角色攻略
message PlayerStrategyInfo {
	map<uint32, HeroStrategyInfo> HeroList = 1; // KEY: HeroCfgID 
}

// 幻灵数据统计
message HeroStrategyInfo {
	HeroSkillStrategy SkillStrategy = 1;
	HeroEmabttleStrategy EmabttleStrategy = 2;
	HeroKTPSkillStrategy KTPSkillStrategy = 3;
}

// 幻灵技能策略
message HeroSkillStrategy 
{
	map<uint32, uint32> HeroSkillList = 1; // KEY: SkillType 
}

// 幻灵阵型策略
message HeroEmabttleStrategy 
{
	map<uint32, uint32> EmabttleHeroNum = 1; // KEY: HeroCfgID  value num
}

// 幻灵开天牌技能策略
message HeroKTPSkillStrategy 
{
	map<uint32, uint32> HeroKTSkillNum = 1; // KEY: SkillID  value num
}

// 幻灵玩法策略
message HeroPlayStrategyView {
	map<uint32, HeroPlayStrategyPlayerListView> PlayList = 1; // KEY: RankType玩法类型
}

message HeroPlayStrategyPlayerListView {
	repeated HeroPlayStrategyItemView PlayerList = 1;
}

message HeroPlayStrategyItemView {
	uint32 LevelID = 1;
	uint32 Rank = 2;
	string PlayerID = 3;
	string PlayerName = 4;
	string PlayerHeadIcon = 5;
	uint32 HeadIconFrame = 6;//头像框
	uint32 PlayerLevel = 7;
	uint32 MainPlayerCfgID = 8;
	uint32 MainPlayerSkinCfgID = 9;//主角皮肤配置ID
	uint32 PlayerTitleID = 10;
	cliAllEnum.FactionType FactionType = 11; // 阵营类型
	map<uint32,RankEmabttleHeroInfo> HeroList = 12;//key布阵的位置,value herocfgid
}

// 玩法排行阵型信息
message RankEmabttleInfo {
	map<uint32,RankEmabttleHeroInfo> HeroList = 1;//key布阵的位置,value herocfgid
}

message RankEmabttleHeroInfo {
	uint32 HeroCfgID = 1;
	uint32 HeroLv = 2;
	uint32 DisplayHeroStars = 3;
	uint32 FaXiangGrade = 4;
	uint32 HeroAwakeLevel = 5;
	uint32 HeroStar = 6;//英雄星级
}

message C2G_HeroStrategyReq
{
	cliAllEnum.HeroStrategyType HeroStrategyType=1;
	uint32 HeroCfgID =2;
}

message G2C_HeroStrategyRes
{
	errorNo.ErrorNo Err = 1;
	uint32 HeroCfgID =2;
	cliAllEnum.HeroStrategyType HeroStrategyType=3;
	HeroSkillStrategy SkillStrategy = 4;
	HeroEmabttleStrategy EmabttleStrategy=5;
	HeroKTPSkillStrategy KTPSkillStrategy = 6;
	HeroPlayStrategyView HeroPlayStrategy = 7;
}

message C2G_WorldMatchPlayerBeBeatenReq
{

}
message G2C_WorldMatchPlayerBeBeatenRes
{
	repeated ArenaBattleReport ArenaBattleReportList = 1;
	errorNo.ErrorNo Err = 2;
}

message C2G_WorldMatchPlayerBeBeatenNtfReq
{

}
message G2C_WorldMatchPlayerBeBeatenNtfRes
{
	bool BeBeaten = 1;
	errorNo.ErrorNo Err = 3;
}

message G2C_SyncWorldMatchNtfRes
{
	uint32 WorldMatchBattleStartTS = 1;//可以开始匹配时间
	uint32 NewSeason = 2;
	uint32 WorldMatchCurSanXiaoCfgID = 3;
	uint32 SeasonSettlementEndTs  = 4;
}

message C2G_GetPlayerLvAwardReq
{
	uint32 Level = 1;
}
message G2C_GetPlayerLvAwardRes
{
	errorNo.ErrorNo Err = 1;
	repeated ItemReq ItemList = 2;
}

message G2C_SyncPlayerLvAwardRes
{
	errorNo.ErrorNo Err = 1;
	map<uint32,uint32> LevelAwardList = 2; // 等级奖励记录
}

// 密卷合成
message C2G_ComposeItemReq
{
	uint32 ItemCfgID = 1;
	uint32 ItemNum = 2;
}
message G2C_ComposeItemRes
{
	errorNo.ErrorNo Err = 1;
	ItemReq ItemInfo = 2;
}
message G2C_AssistFriendInfoView
{
	map<string,GoodFriendInfo> GoodFriendList = 1;
	map<string,uint32> FriendLeveList = 2;// key playerid  value:level
}